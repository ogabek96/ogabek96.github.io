var _global="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};_global.SENTRY_RELEASE={id:"ed32973"},(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{lIf3:function(n,e,t){"use strict";t.d(e,"g",(function(){return Mi})),t.d(e,"h",(function(){return Li})),t.d(e,"i",(function(){return hi})),t.d(e,"j",(function(){return or})),t.d(e,"k",(function(){return Ir})),t.d(e,"l",(function(){return Sr})),t.d(e,"m",(function(){return Cr})),t.d(e,"n",(function(){return yr})),t.d(e,"o",(function(){return Dr})),t.d(e,"p",(function(){return Hr})),t.d(e,"q",(function(){return oo})),t.d(e,"r",(function(){return So})),t.d(e,"s",(function(){return Ko})),t.d(e,"t",(function(){return Ed})),t.d(e,"J",(function(){return rc})),t.d(e,"C",(function(){return dc})),t.d(e,"V",(function(){return sc})),t.d(e,"O",(function(){return Ec})),t.d(e,"X",(function(){return lc})),t.d(e,"x",(function(){return pc})),t.d(e,"y",(function(){return _c})),t.d(e,"a",(function(){return Ic})),t.d(e,"z",(function(){return Oc})),t.d(e,"b",(function(){return Sc})),t.d(e,"A",(function(){return Rc})),t.d(e,"c",(function(){return Ac})),t.d(e,"B",(function(){return fc})),t.d(e,"d",(function(){return Cc})),t.d(e,"D",(function(){return gc})),t.d(e,"db",(function(){return bc})),t.d(e,"E",(function(){return Pc})),t.d(e,"f",(function(){return Mc})),t.d(e,"S",(function(){return Lc})),t.d(e,"M",(function(){return Fc})),t.d(e,"U",(function(){return $c})),t.d(e,"w",(function(){return jc})),t.d(e,"Z",(function(){return hc})),t.d(e,"ab",(function(){return Bc})),t.d(e,"R",(function(){return qc})),t.d(e,"cb",(function(){return wc})),t.d(e,"fb",(function(){return Yc})),t.d(e,"L",(function(){return xc})),t.d(e,"v",(function(){return Kc})),t.d(e,"Y",(function(){return Qc})),t.d(e,"K",(function(){return Jc})),t.d(e,"u",(function(){return zc})),t.d(e,"T",(function(){return Zc})),t.d(e,"e",(function(){return ns})),t.d(e,"Q",(function(){return es})),t.d(e,"P",(function(){return ts})),t.d(e,"N",(function(){return is})),t.d(e,"F",(function(){return os})),t.d(e,"G",(function(){return cs})),t.d(e,"eb",(function(){return us})),t.d(e,"H",(function(){return ms})),t.d(e,"I",(function(){return Ts})),t.d(e,"W",(function(){return Ns})),t.d(e,"bb",(function(){return Is}));var a,i,r,o,d,c,s,u,E,m,l,T,p,N,_,I,O,S,R,A,f,C,g,y,b,D,P,M,L,U,F,v,$,j,h,G,B,H,q,V,w,k,Y,W,x,K,Q,X,J,z,Z,nn,en,tn,an,rn,on,dn,cn,sn,un,En,mn,ln,Tn,pn,Nn,_n,In,On,Sn,Rn,An,fn,Cn,gn,yn,bn,Dn,Pn,Mn,Ln,Un,Fn,vn,$n,jn,hn,Gn,Bn,Hn,qn,Vn,wn,kn,Yn,Wn,xn,Kn,Qn,Xn,Jn,zn,Zn,ne,ee,te,ae,ie,re,oe,de,ce,se,ue,Ee,me,le,Te,pe,Ne,_e,Ie,Oe,Se,Re,Ae,fe,Ce,ge,ye,be,De,Pe,Me,Le,Ue,Fe,ve,$e,je,he,Ge,Be,He,qe,Ve,we,ke,Ye,We,xe,Ke,Qe,Xe,Je,ze,Ze,nt,et,tt,at,it,rt,ot,dt,ct,st,ut,Et,mt,lt,Tt,pt,Nt,_t,It,Ot,St,Rt,At,ft,Ct,gt,yt,bt,Dt,Pt,Mt,Lt,Ut,Ft,vt,$t,jt,ht,Gt,Bt,Ht,qt,Vt,wt,kt,Yt,Wt,xt,Kt,Qt,Xt,Jt,zt,Zt,na,ea,ta,aa,ia,ra,oa,da,ca,sa,ua,Ea,ma,la,Ta,pa,Na,_a,Ia,Oa,Sa,Ra,Aa,fa,Ca,ga,ya,ba,Da,Pa,Ma,La,Ua,Fa,va,$a,ja,ha,Ga,Ba,Ha,qa,Va,wa,ka,Ya,Wa,xa,Ka,Qa,Xa,Ja,za,Za,ni,ei,ti,ai,ii,ri,oi,di,ci,si,ui,Ei,mi,li,Ti,pi,Ni,_i,Ii,Oi,Si,Ri,Ai,fi,Ci,gi,yi,bi,Di,Pi,Mi,Li,Ui,Fi,vi,$i,ji,hi,Gi,Bi,Hi,qi,Vi,wi,ki,Yi,Wi,xi,Ki,Qi,Xi,Ji,zi,Zi,nr,er,tr,ar,ir,rr,or,dr,cr,sr,ur,Er,mr,lr,Tr,pr,Nr,_r,Ir,Or,Sr,Rr,Ar,fr,Cr,gr,yr,br,Dr,Pr,Mr,Lr,Ur,Fr,vr,$r,jr,hr,Gr,Br,Hr,qr,Vr,wr,kr,Yr,Wr,xr,Kr,Qr,Xr,Jr,zr,Zr,no,eo,to,ao,io,ro,oo,co,so,uo,Eo,mo,lo,To,po,No,_o,Io,Oo,So,Ro,Ao,fo,Co,go,yo,bo,Do,Po,Mo,Lo,Uo,Fo,vo,$o,jo,ho,Go,Bo,Ho,qo,Vo,wo,ko,Yo,Wo,xo,Ko,Qo,Xo,Jo,zo,Zo,nd,ed,td,ad,id,rd,od,dd,cd,sd,ud,Ed,md,ld,Td,pd,Nd,_d,Id,Od,Sd=t("fN7T"),Rd=t("qtT1"),Ad=t("VBFi"),fd=t("rLws"),Cd=t("Isv8"),gd={};!function(n){n.Account="ACCOUNT",n.Unknown="UNKNOWN"}(Ri||(Ri={})),function(n){n.High="HIGH",n.Low="LOW",n.Medium="MEDIUM"}(Ai||(Ai={})),function(n){n.Assigned="ASSIGNED",n.Cancelled="CANCELLED",n.InProgress="IN_PROGRESS",n.Resolved="RESOLVED",n.Unassigned="UNASSIGNED",n.Unsuccessful="UNSUCCESSFUL"}(fi||(fi={})),function(n){n.Automatic="AUTOMATIC",n.Manual="MANUAL",n.Unassigned="UNASSIGNED"}(Ci||(Ci={})),function(n){n.MoveIn="MOVE_IN",n.MoveOut="MOVE_OUT",n.ProductUpdate="PRODUCT_UPDATE"}(gi||(gi={})),function(n){n.Current="CURRENT",n.Failed="FAILED",n.Historic="HISTORIC"}(yi||(yi={})),function(n){n.Monthly="MONTHLY",n.Quarterly="QUARTERLY"}(bi||(bi={})),function(n){n.ExternalReferralCredit="EXTERNAL_REFERRAL_CREDIT"}(Di||(Di={})),function(n){n.EmailReceived="EMAIL_RECEIVED",n.EmailSent="EMAIL_SENT",n.MarketingEmailSent="MARKETING_EMAIL_SENT",n.PrintCancelled="PRINT_CANCELLED",n.PrintFailed="PRINT_FAILED",n.PrintReturned="PRINT_RETURNED",n.PrintSent="PRINT_SENT",n.PrintSucceeded="PRINT_SUCCEEDED"}(Pi||(Pi={})),function(n){n.Cleared="CLEARED",n.Deleted="DELETED",n.Failed="FAILED",n.Fulfilled="FULFILLED",n.Historic="HISTORIC",n.Pending="PENDING",n.Promised="PROMISED",n.PromiseBroken="PROMISE_BROKEN",n.Requested="REQUESTED",n.Scheduled="SCHEDULED",n.ThirdParty="THIRD_PARTY"}(Mi||(Mi={})),function(n){n.Agency="AGENCY",n.AllpayCard="ALLPAY_CARD",n.AllpayCash="ALLPAY_CASH",n.AllpayCheque="ALLPAY_CHEQUE",n.AustraliaPost="AUSTRALIA_POST",n.BacsDeposit="BACS_DEPOSIT",n.Bpay="BPAY",n.Bpoint="BPOINT",n.BristolPound="BRISTOL_POUND",n.Cash="CASH",n.Centrepay="CENTREPAY",n.Cheque="CHEQUE",n.CreditCard="CREDIT_CARD",n.DcaCollection="DCA_COLLECTION",n.DdFinalCollection="DD_FINAL_COLLECTION",n.DdFirstCollection="DD_FIRST_COLLECTION",n.DdRegularCollection="DD_REGULAR_COLLECTION",n.DdRePresentation="DD_RE_PRESENTATION",n.DebitCard="DEBIT_CARD",n.EapaVoucher="EAPA_VOUCHER",n.Eft="EFT",n.ErroneousPayment="ERRONEOUS_PAYMENT",n.FailedRepaymentReversal="FAILED_REPAYMENT_REVERSAL",n.FuelDirect="FUEL_DIRECT",n.Heeas="HEEAS",n.Ivr="IVR",n.Konbini="KONBINI",n.PagopaNotice="PAGOPA_NOTICE",n.PaymentFee="PAYMENT_FEE",n.PaypointCard="PAYPOINT_CARD",n.PaypointCash="PAYPOINT_CASH",n.PaypointCheque="PAYPOINT_CHEQUE",n.Payzone="PAYZONE",n.PostOfficeCard="POST_OFFICE_CARD",n.PostOfficeCash="POST_OFFICE_CASH",n.PostOfficeCheque="POST_OFFICE_CHEQUE",n.PostOfficeSavingsStamps="POST_OFFICE_SAVINGS_STAMPS",n.PrepaidCard="PREPAID_CARD",n.PrepayCard="PREPAY_CARD",n.PrepayKey="PREPAY_KEY",n.PrepaySmart="PREPAY_SMART",n.PrepayToken="PREPAY_TOKEN",n.TransferFromSap="TRANSFER_FROM_SAP",n.Unknown="UNKNOWN",n.Urgs="URGS"}(Li||(Li={})),function(n){n.AccountCoolOff="ACCOUNT_COOL_OFF",n.AccountMigrationSyncXoserveMeterMismatch="ACCOUNT_MIGRATION_SYNC_XOSERVE_METER_MISMATCH",n.AdHoc="AD_HOC",n.AgreementRevoked="AGREEMENT_REVOKED",n.AmperageChange="AMPERAGE_CHANGE",n.AusEmbeddedWaterEstimationRequiredForSkippedReading="AUS_EMBEDDED_WATER_ESTIMATION_REQUIRED_FOR_SKIPPED_READING",n.AusEmbeddedWaterReadingFailure="AUS_EMBEDDED_WATER_READING_FAILURE",n.AusVicSharedfuseNotification="AUS_VIC_SHAREDFUSE_NOTIFICATION",n.AutomatedBillingDisabled="AUTOMATED_BILLING_DISABLED",n.Billing="BILLING",n.BillingAmendedIntervalDataReceivedCausingOvercharge="BILLING_AMENDED_INTERVAL_DATA_RECEIVED_CAUSING_OVERCHARGE",n.BillingAmendedMeterReadBasic="BILLING_AMENDED_METER_READ_BASIC",n.BillingAmendedMeterReadCesElecBasic="BILLING_AMENDED_METER_READ_CES_ELEC_BASIC",n.BillingAmendedMeterReadCesElecInterval="BILLING_AMENDED_METER_READ_CES_ELEC_INTERVAL",n.BillingAmendedMeterReadGas="BILLING_AMENDED_METER_READ_GAS",n.BillingAmendedMeterReadInterval="BILLING_AMENDED_METER_READ_INTERVAL",n.BillingAmendedMeterReadIntervalLegacy="BILLING_AMENDED_METER_READ_INTERVAL_LEGACY",n.BillingAmendedMeterReadPreMigration="BILLING_AMENDED_METER_READ_PRE_MIGRATION",n.BillingBackdatedConcessionReceived="BILLING_BACKDATED_CONCESSION_RECEIVED",n.BillingBackdatedUmsRecordReceived="BILLING_BACKDATED_UMS_RECORD_RECEIVED",n.BillingCustomerSelfReadReceived="BILLING_CUSTOMER_SELF_READ_RECEIVED",n.BillingMissingRead="BILLING_MISSING_READ",n.BillingQuotedNtcDoesNotAlign="BILLING_QUOTED_NTC_DOES_NOT_ALIGN",n.BillingRegisterReplacedOrRemoved="BILLING_REGISTER_REPLACED_OR_REMOVED",n.CancelMoveOutUnableToReinstateFutureAgreements="CANCEL_MOVE_OUT_UNABLE_TO_REINSTATE_FUTURE_AGREEMENTS",n.ChurnPrevention="CHURN_PREVENTION",n.CommsToBePrinted="COMMS_TO_BE_PRINTED",n.ContractCommsNotDelivered="CONTRACT_COMMS_NOT_DELIVERED",n.CosGain="COS_GAIN",n.CosGainMigrationEcoesMeterMismatch="COS_GAIN_MIGRATION_ECOES_METER_MISMATCH",n.CosGainRelRetrievalFailure="COS_GAIN_REL_RETRIEVAL_FAILURE",n.CosLoss="COS_LOSS",n.CustomerDetailsChange="CUSTOMER_DETAILS_CHANGE",n.CustomerReportedSmartMeterIssues="CUSTOMER_REPORTED_SMART_METER_ISSUES",n.D0010CreationFailure="D0010_CREATION_FAILURE",n.D0052CreationFailure="D0052_CREATION_FAILURE",n.D0205CreationFailure="D0205_CREATION_FAILURE",n.DisconnectionMandatoryNoticeEmailFailure="DISCONNECTION_MANDATORY_NOTICE_EMAIL_FAILURE",n.DisconnectionMandatoryNoticeSmsFailure="DISCONNECTION_MANDATORY_NOTICE_SMS_FAILURE",n.DunningBestEndeavoursCall="DUNNING_BEST_ENDEAVOURS_CALL",n.DunningDisconnectionDeEnergisationAssessment="DUNNING_DISCONNECTION_DE_ENERGISATION_ASSESSMENT",n.DunningDisconnectionMandatoryNoticeEmailFailure="DUNNING_DISCONNECTION_MANDATORY_NOTICE_EMAIL_FAILURE",n.DunningDisconnectionOutboundReminderCall="DUNNING_DISCONNECTION_OUTBOUND_REMINDER_CALL",n.DunningMandatoryNoticeEmailFailure="DUNNING_MANDATORY_NOTICE_EMAIL_FAILURE",n.DunningOutboundReminderCall="DUNNING_OUTBOUND_REMINDER_CALL",n.DunningReminder="DUNNING_REMINDER",n.DunningReminderCall="DUNNING_REMINDER_CALL",n.DunningReminderDisconnectionApplication="DUNNING_REMINDER_DISCONNECTION_APPLICATION",n.DunningReminderPaymentMade="DUNNING_REMINDER_PAYMENT_MADE",n.DunningVacantConsumptionDeEnergisationAssessment="DUNNING_VACANT_CONSUMPTION_DE_ENERGISATION_ASSESSMENT",n.EmbeddedNetworkAllChildLifeSupportRecordsAreDeregistered="EMBEDDED_NETWORK_ALL_CHILD_LIFE_SUPPORT_RECORDS_ARE_DEREGISTERED",n.EmbeddedNetworkExceptionDistributorOwnedParentLifeSupportRecord="EMBEDDED_NETWORK_EXCEPTION_DISTRIBUTOR_OWNED_PARENT_LIFE_SUPPORT_RECORD",n.EmbeddedNetworkExceptionParentMeterPointLostOrLosing="EMBEDDED_NETWORK_EXCEPTION_PARENT_METER_POINT_LOST_OR_LOSING",n.EmbeddedNetworkExceptionParentMeterPointReceivedDangerousLifeSupportNotification="EMBEDDED_NETWORK_EXCEPTION_PARENT_METER_POINT_RECEIVED_DANGEROUS_LIFE_SUPPORT_NOTIFICATION",n.EmbeddedNetworkExceptionParentMeterPointReceivedLifeSupportNotification="EMBEDDED_NETWORK_EXCEPTION_PARENT_METER_POINT_RECEIVED_LIFE_SUPPORT_NOTIFICATION",n.FieldworksAllocateNmiMarketParticipantsNotSet="FIELDWORKS_ALLOCATE_NMI_MARKET_PARTICIPANTS_NOT_SET",n.FieldworksAssignMeteringCoordinatorStepFailed="FIELDWORKS_ASSIGN_METERING_COORDINATOR_STEP_FAILED",n.FieldworksAssignMeteringProviderStepFailed="FIELDWORKS_ASSIGN_METERING_PROVIDER_STEP_FAILED",n.FieldworksBulkDeploymentJourneyAutoCancelled="FIELDWORKS_BULK_DEPLOYMENT_JOURNEY_AUTO_CANCELLED",n.FieldworksChangeRetailerFailed="FIELDWORKS_CHANGE_RETAILER_FAILED",n.FieldworksContactSoRecipientToUpdateTheSoDetails="FIELDWORKS_CONTACT_SO_RECIPIENT_TO_UPDATE_THE_SO_DETAILS",n.FieldworksExpectedMeterPointNotCreated="FIELDWORKS_EXPECTED_METER_POINT_NOT_CREATED",n.FieldworksExpectedMeterReadNotReceived="FIELDWORKS_EXPECTED_METER_READ_NOT_RECEIVED",n.FieldworksExpectedNtcsNotReceived="FIELDWORKS_EXPECTED_NTCS_NOT_RECEIVED",n.FieldworksInvestigateWhetherJourneyNeedsContinuation="FIELDWORKS_INVESTIGATE_WHETHER_JOURNEY_NEEDS_CONTINUATION",n.FieldworksJourneyAttachments="FIELDWORKS_JOURNEY_ATTACHMENTS",n.FieldworksJourneyCancelledDueToLifeSupportRegistration="FIELDWORKS_JOURNEY_CANCELLED_DUE_TO_LIFE_SUPPORT_REGISTRATION",n.FieldworksManuallyCompleteCustomerMoveIn="FIELDWORKS_MANUALLY_COMPLETE_CUSTOMER_MOVE_IN",n.FieldworksMeterpointIsNotActive="FIELDWORKS_METERPOINT_IS_NOT_ACTIVE",n.FieldworksMeterFaultJourneyAutoCancelled="FIELDWORKS_METER_FAULT_JOURNEY_AUTO_CANCELLED",n.FieldworksMeterFaultNcomCommsFailed="FIELDWORKS_METER_FAULT_NCOM_COMMS_FAILED",n.FieldworksMeterFaultReceived="FIELDWORKS_METER_FAULT_RECEIVED",n.FieldworksMirnDiscoveryFailed="FIELDWORKS_MIRN_DISCOVERY_FAILED",n.FieldworksMoveOutCancelledWhileSupplyAbolishmentInProgress="FIELDWORKS_MOVE_OUT_CANCELLED_WHILE_SUPPLY_ABOLISHMENT_IN_PROGRESS",n.FieldworksMultipleOpenJourneysForMeterPoint="FIELDWORKS_MULTIPLE_OPEN_JOURNEYS_FOR_METER_POINT",n.FieldworksNewConnectionCompletionReview="FIELDWORKS_NEW_CONNECTION_COMPLETION_REVIEW",n.FieldworksNewConnectionDataNotValid="FIELDWORKS_NEW_CONNECTION_DATA_NOT_VALID",n.FieldworksObtainCustomerApprovalBeforeProgressing="FIELDWORKS_OBTAIN_CUSTOMER_APPROVAL_BEFORE_PROGRESSING",n.FieldworksObtainSupplyAbolishmentApproval="FIELDWORKS_OBTAIN_SUPPLY_ABOLISHMENT_APPROVAL",n.FieldworksServiceOrderAttachments="FIELDWORKS_SERVICE_ORDER_ATTACHMENTS",n.FieldworksServiceOrderPartiallyCompleted="FIELDWORKS_SERVICE_ORDER_PARTIALLY_COMPLETED",n.FieldworksServiceOrderUnableToAccessWithCustomerConsultation="FIELDWORKS_SERVICE_ORDER_UNABLE_TO_ACCESS_WITH_CUSTOMER_CONSULTATION",n.FieldworksSupplyPeriodDoesNotExistForMeterpoint="FIELDWORKS_SUPPLY_PERIOD_DOES_NOT_EXIST_FOR_METERPOINT",n.FieldworksUploadAttachmentToJemenaPortal="FIELDWORKS_UPLOAD_ATTACHMENT_TO_JEMENA_PORTAL",n.FinalBillingUnableToBill="FINAL_BILLING_UNABLE_TO_BILL",n.FlowFileError="FLOW_FILE_ERROR",n.FraActivationProcessAwaitingSwitchInConfirmation="FRA_ACTIVATION_PROCESS_AWAITING_SWITCH_IN_CONFIRMATION",n.FraActivationProcessAwaitingSwitchReadings="FRA_ACTIVATION_PROCESS_AWAITING_SWITCH_READINGS",n.FraActivationProcessCommanderSouscription="FRA_ACTIVATION_PROCESS_COMMANDER_SOUSCRIPTION",n.FraActivationProcessInceptionChecks="FRA_ACTIVATION_PROCESS_INCEPTION_CHECKS",n.FraActivationProcessPrmEligibility="FRA_ACTIVATION_PROCESS_PRM_ELIGIBILITY",n.FraActivationProcessScheduleSiteworks="FRA_ACTIVATION_PROCESS_SCHEDULE_SITEWORKS",n.FraElecActivationProcessWrongSwitchReadingsForProviderCalendarTemporalClasses="FRA_ELEC_ACTIVATION_PROCESS_WRONG_SWITCH_READINGS_FOR_PROVIDER_CALENDAR_TEMPORAL_CLASSES",n.FraEnergyChequeUnknown="FRA_ENERGY_CHEQUE_UNKNOWN",n.GasExceptionCustomerDetailsNotificationFailed="GAS_EXCEPTION_CUSTOMER_DETAILS_NOTIFICATION_FAILED",n.GasExceptionCustomerTransferCancelled="GAS_EXCEPTION_CUSTOMER_TRANSFER_CANCELLED",n.GasExceptionCustomerTransferRejected="GAS_EXCEPTION_CUSTOMER_TRANSFER_REJECTED",n.GasExceptionLifeSupportNotificationFailed="GAS_EXCEPTION_LIFE_SUPPORT_NOTIFICATION_FAILED",n.GasExceptionMeterDataVerifyRequestFailed="GAS_EXCEPTION_METER_DATA_VERIFY_REQUEST_FAILED",n.GasExceptionMeterDataVerifyResponseNoChangeWithExplanation="GAS_EXCEPTION_METER_DATA_VERIFY_RESPONSE_NO_CHANGE_WITH_EXPLANATION",n.GasExceptionMeterDataVerifyResponseOverdue="GAS_EXCEPTION_METER_DATA_VERIFY_RESPONSE_OVERDUE",n.GasExceptionMeterDataVerifyResponseWithoutRevisedRead="GAS_EXCEPTION_METER_DATA_VERIFY_RESPONSE_WITHOUT_REVISED_READ",n.GasExceptionSiteAccessDetailsNotificationFailed="GAS_EXCEPTION_SITE_ACCESS_DETAILS_NOTIFICATION_FAILED",n.GasExceptionSiteAccessDetailsReceivedForNonExistentMeter="GAS_EXCEPTION_SITE_ACCESS_DETAILS_RECEIVED_FOR_NON_EXISTENT_METER",n.GasExceptionSiteAddressDetailsNotificationFailed="GAS_EXCEPTION_SITE_ADDRESS_DETAILS_NOTIFICATION_FAILED",n.GasManualServiceOrderRequiredForEnrolment="GAS_MANUAL_SERVICE_ORDER_REQUIRED_FOR_ENROLMENT",n.GasNotificationChangeOfSiteAddress="GAS_NOTIFICATION_CHANGE_OF_SITE_ADDRESS",n.GasReadingRemovedInstalledReceived="GAS_READING_REMOVED_INSTALLED_RECEIVED",n.GasUnknownCustomerClassificationCodeReceived="GAS_UNKNOWN_CUSTOMER_CLASSIFICATION_CODE_RECEIVED",n.HardshipGraduationAssessment="HARDSHIP_GRADUATION_ASSESSMENT",n.HardshipRemovalAssessment="HARDSHIP_REMOVAL_ASSESSMENT",n.HeldStatement="HELD_STATEMENT",n.IndustryChangeOfSupplierDoubleGain="INDUSTRY_CHANGE_OF_SUPPLIER_DOUBLE_GAIN",n.IndustryCustomerTransferDelayed="INDUSTRY_CUSTOMER_TRANSFER_DELAYED",n.IndustryExceptionChangeOfSupplierCancelled="INDUSTRY_EXCEPTION_CHANGE_OF_SUPPLIER_CANCELLED",n.IndustryExceptionChangeOfSupplierConflictingPeriod="INDUSTRY_EXCEPTION_CHANGE_OF_SUPPLIER_CONFLICTING_PERIOD",n.IndustryExceptionChangeOfSupplierGainCompletionOverdue="INDUSTRY_EXCEPTION_CHANGE_OF_SUPPLIER_GAIN_COMPLETION_OVERDUE",n.IndustryExceptionChangeOfSupplierObjected="INDUSTRY_EXCEPTION_CHANGE_OF_SUPPLIER_OBJECTED",n.IndustryExceptionChangeOfSupplierRejected="INDUSTRY_EXCEPTION_CHANGE_OF_SUPPLIER_REJECTED",n.IndustryExceptionChangeRequestCancellationFailed="INDUSTRY_EXCEPTION_CHANGE_REQUEST_CANCELLATION_FAILED",n.IndustryExceptionChangeRequestCancelled="INDUSTRY_EXCEPTION_CHANGE_REQUEST_CANCELLED",n.IndustryExceptionChangeRequestCompleted="INDUSTRY_EXCEPTION_CHANGE_REQUEST_COMPLETED",n.IndustryExceptionChangeRequestObjected="INDUSTRY_EXCEPTION_CHANGE_REQUEST_OBJECTED",n.IndustryExceptionChangeRequestObjectionMissingAck="INDUSTRY_EXCEPTION_CHANGE_REQUEST_OBJECTION_MISSING_ACK",n.IndustryExceptionChangeRequestObjectionRejected="INDUSTRY_EXCEPTION_CHANGE_REQUEST_OBJECTION_REJECTED",n.IndustryExceptionChangeRequestObjectionWithdrawalRejected="INDUSTRY_EXCEPTION_CHANGE_REQUEST_OBJECTION_WITHDRAWAL_REJECTED",n.IndustryExceptionChangeRequestRejected="INDUSTRY_EXCEPTION_CHANGE_REQUEST_REJECTED",n.IndustryExceptionChangeRequestWithdrawalRejected="INDUSTRY_EXCEPTION_CHANGE_REQUEST_WITHDRAWAL_REJECTED",n.IndustryExceptionCustomerDetailsNotificationInvalidBillingAddress="INDUSTRY_EXCEPTION_CUSTOMER_DETAILS_NOTIFICATION_INVALID_BILLING_ADDRESS",n.IndustryExceptionCustomerDetailsNotificationMissingBusinessAcceptance="INDUSTRY_EXCEPTION_CUSTOMER_DETAILS_NOTIFICATION_MISSING_BUSINESS_ACCEPTANCE",n.IndustryExceptionCustomerDetailsNotificationMissingMandatoryFields="INDUSTRY_EXCEPTION_CUSTOMER_DETAILS_NOTIFICATION_MISSING_MANDATORY_FIELDS",n.IndustryExceptionCustomerDetailsNotificationRejected="INDUSTRY_EXCEPTION_CUSTOMER_DETAILS_NOTIFICATION_REJECTED",n.IndustryExceptionCustomerDetailsRequestSpecialReason="INDUSTRY_EXCEPTION_CUSTOMER_DETAILS_REQUEST_SPECIAL_REASON",n.IndustryExceptionHouseMoveEnrolmentCannotCalculateMoveInReading="INDUSTRY_EXCEPTION_HOUSE_MOVE_ENROLMENT_CANNOT_CALCULATE_MOVE_IN_READING",n.IndustryExceptionHouseMoveEnrolmentServiceOrderAlreadyInProgress="INDUSTRY_EXCEPTION_HOUSE_MOVE_ENROLMENT_SERVICE_ORDER_ALREADY_IN_PROGRESS",n.IndustryExceptionHouseMoveEnrolmentUnableToCopyLastMeterReading="INDUSTRY_EXCEPTION_HOUSE_MOVE_ENROLMENT_UNABLE_TO_COPY_LAST_METER_READING",n.IndustryExceptionLifeSupportContactUserRemovedFromAccount="INDUSTRY_EXCEPTION_LIFE_SUPPORT_CONTACT_USER_REMOVED_FROM_ACCOUNT",n.IndustryExceptionLifeSupportMultipleAccountsMatches="INDUSTRY_EXCEPTION_LIFE_SUPPORT_MULTIPLE_ACCOUNTS_MATCHES",n.IndustryExceptionLifeSupportMultipleLifeSupportContactMatches="INDUSTRY_EXCEPTION_LIFE_SUPPORT_MULTIPLE_LIFE_SUPPORT_CONTACT_MATCHES",n.IndustryExceptionLifeSupportNotificationContainsUnexpectedData="INDUSTRY_EXCEPTION_LIFE_SUPPORT_NOTIFICATION_CONTAINS_UNEXPECTED_DATA",n.IndustryExceptionLifeSupportNotificationFailedToSend="INDUSTRY_EXCEPTION_LIFE_SUPPORT_NOTIFICATION_FAILED_TO_SEND",n.IndustryExceptionLifeSupportNotificationInvalidContactMethod="INDUSTRY_EXCEPTION_LIFE_SUPPORT_NOTIFICATION_INVALID_CONTACT_METHOD",n.IndustryExceptionLifeSupportNotificationInvalidPhone="INDUSTRY_EXCEPTION_LIFE_SUPPORT_NOTIFICATION_INVALID_PHONE",n.IndustryExceptionLifeSupportNotificationMissingBusinessAcceptance="INDUSTRY_EXCEPTION_LIFE_SUPPORT_NOTIFICATION_MISSING_BUSINESS_ACCEPTANCE",n.IndustryExceptionLifeSupportNotificationReceivedFromNonRegistrationOwner="INDUSTRY_EXCEPTION_LIFE_SUPPORT_NOTIFICATION_RECEIVED_FROM_NON_REGISTRATION_OWNER",n.IndustryExceptionLifeSupportNotificationRejected="INDUSTRY_EXCEPTION_LIFE_SUPPORT_NOTIFICATION_REJECTED",n.IndustryExceptionLifeSupportNotificationUnknownContact="INDUSTRY_EXCEPTION_LIFE_SUPPORT_NOTIFICATION_UNKNOWN_CONTACT",n.IndustryExceptionLifeSupportRequestMissingBusinessAcceptance="INDUSTRY_EXCEPTION_LIFE_SUPPORT_REQUEST_MISSING_BUSINESS_ACCEPTANCE",n.IndustryExceptionLifeSupportRequestMissingLifeSupportNotification="INDUSTRY_EXCEPTION_LIFE_SUPPORT_REQUEST_MISSING_LIFE_SUPPORT_NOTIFICATION",n.IndustryExceptionLifeSupportRequestRejected="INDUSTRY_EXCEPTION_LIFE_SUPPORT_REQUEST_REJECTED",n.IndustryExceptionMeterPointEnrolmentIncompleteCouldNotSendServiceOrder="INDUSTRY_EXCEPTION_METER_POINT_ENROLMENT_INCOMPLETE_COULD_NOT_SEND_SERVICE_ORDER",n.IndustryExceptionNextScheduledReadDateTooFarInFuture="INDUSTRY_EXCEPTION_NEXT_SCHEDULED_READ_DATE_TOO_FAR_IN_FUTURE",n.IndustryExceptionRelinkingOccurredDuringSdrSync="INDUSTRY_EXCEPTION_RELINKING_OCCURRED_DURING_SDR_SYNC",n.IndustryExceptionSiteAccessDetailsNotificationMissingBusinessAcceptance="INDUSTRY_EXCEPTION_SITE_ACCESS_DETAILS_NOTIFICATION_MISSING_BUSINESS_ACCEPTANCE",n.IndustryExceptionSiteAccessDetailsNotificationRejected="INDUSTRY_EXCEPTION_SITE_ACCESS_DETAILS_NOTIFICATION_REJECTED",n.IndustryExceptionStandingDataPropertiesAddressFailedToUpdate="INDUSTRY_EXCEPTION_STANDING_DATA_PROPERTIES_ADDRESS_FAILED_TO_UPDATE",n.IndustryExceptionUnableToEnrolMeterPointIncompleteCouldNotSendChangeRequest="INDUSTRY_EXCEPTION_UNABLE_TO_ENROL_METER_POINT_INCOMPLETE_COULD_NOT_SEND_CHANGE_REQUEST",n.IndustryExceptionUnableToEnrolMeterPointInvalidNmiMeterStatus="INDUSTRY_EXCEPTION_UNABLE_TO_ENROL_METER_POINT_INVALID_NMI_METER_STATUS",n.IndustryExceptionUnableToEnrolMeterPointNextScheduledReadDatePast="INDUSTRY_EXCEPTION_UNABLE_TO_ENROL_METER_POINT_NEXT_SCHEDULED_READ_DATE_PAST",n.IndustryExceptionUnableToProcessRolr="INDUSTRY_EXCEPTION_UNABLE_TO_PROCESS_ROLR",n.IndustryLifeSupportCancelDeregistrationFailed="INDUSTRY_LIFE_SUPPORT_CANCEL_DEREGISTRATION_FAILED",n.IndustryLifeSupportManualBestEndeavourRequired="INDUSTRY_LIFE_SUPPORT_MANUAL_BEST_ENDEAVOUR_REQUIRED",n.IndustryLifeSupportRegistrationFollowUpRequired="INDUSTRY_LIFE_SUPPORT_REGISTRATION_FOLLOW_UP_REQUIRED",n.IndustryLifeSupportReviewAfterCancelledMoveOutForNextAccount="INDUSTRY_LIFE_SUPPORT_REVIEW_AFTER_CANCELLED_MOVE_OUT_FOR_NEXT_ACCOUNT",n.IndustryLifeSupportReviewAttemptedCancelledMoveOutForNextAccount="INDUSTRY_LIFE_SUPPORT_REVIEW_ATTEMPTED_CANCELLED_MOVE_OUT_FOR_NEXT_ACCOUNT",n.IndustryLifeSupportReviewDeregistration="INDUSTRY_LIFE_SUPPORT_REVIEW_DEREGISTRATION",n.IndustryLifeSupportReviewPostDeregistration="INDUSTRY_LIFE_SUPPORT_REVIEW_POST_DEREGISTRATION",n.IndustryLifeSupportReviewPostDeregistrationComms="INDUSTRY_LIFE_SUPPORT_REVIEW_POST_DEREGISTRATION_COMMS",n.IndustryManualActionRequired="INDUSTRY_MANUAL_ACTION_REQUIRED",n.IndustryManualCustomerDetailsNotificationRequired="INDUSTRY_MANUAL_CUSTOMER_DETAILS_NOTIFICATION_REQUIRED",n.IndustryManualLifeSupportNotificationRequired="INDUSTRY_MANUAL_LIFE_SUPPORT_NOTIFICATION_REQUIRED",n.IndustryMeterPointMissingCustomerClassification="INDUSTRY_METER_POINT_MISSING_CUSTOMER_CLASSIFICATION",n.IndustryReadingsNotSent="INDUSTRY_READINGS_NOT_SENT",n.IndustrySendLifeSupportDeRegistrationForm="INDUSTRY_SEND_LIFE_SUPPORT_DE_REGISTRATION_FORM",n.IndustryUnableToCreateRecord="INDUSTRY_UNABLE_TO_CREATE_RECORD",n.IndustryVicDroManualLifeSupportExtensionRequest="INDUSTRY_VIC_DRO_MANUAL_LIFE_SUPPORT_EXTENSION_REQUEST",n.IndustryWarningMessageReceived="INDUSTRY_WARNING_MESSAGE_RECEIVED",n.JpnCallForDunningCampaign="JPN_CALL_FOR_DUNNING_CAMPAIGN",n.JpnConfirmationOfRelocation="JPN_CONFIRMATION_OF_RELOCATION",n.JpnConfirmPaymentForDunningCampaign="JPN_CONFIRM_PAYMENT_FOR_DUNNING_CAMPAIGN",n.JpnFinalReadingOutsideAgreement="JPN_FINAL_READING_OUTSIDE_AGREEMENT",n.JpnReadingsNotReceived="JPN_READINGS_NOT_RECEIVED",n.JpnShortTermMoveInRejection="JPN_SHORT_TERM_MOVE_IN_REJECTION",n.JpnSupplyDetailsUpdateConfirmation="JPN_SUPPLY_DETAILS_UPDATE_CONFIRMATION",n.Kmt="KMT",n.MailFailed="MAIL_FAILED",n.MailReturned="MAIL_RETURNED",n.MandatoryCommsNotDelivered="MANDATORY_COMMS_NOT_DELIVERED",n.MarketSupplyExceptionAgreementFailedToCreate="MARKET_SUPPLY_EXCEPTION_AGREEMENT_FAILED_TO_CREATE",n.MarketSupplyExceptionAgreementFailedToReverseTermination="MARKET_SUPPLY_EXCEPTION_AGREEMENT_FAILED_TO_REVERSE_TERMINATION",n.MarketSupplyExceptionAgreementFailedToTerminate="MARKET_SUPPLY_EXCEPTION_AGREEMENT_FAILED_TO_TERMINATE",n.MarketSupplyExceptionAgreementFailedToUpdate="MARKET_SUPPLY_EXCEPTION_AGREEMENT_FAILED_TO_UPDATE",n.MarketSupplyExceptionMissingAccountQuotedProduct="MARKET_SUPPLY_EXCEPTION_MISSING_ACCOUNT_QUOTED_PRODUCT",n.MeterExchangeOneWayNotification="METER_EXCHANGE_ONE_WAY_NOTIFICATION",n.MeterFaultAndIssueOneWayNotificationAccepted="METER_FAULT_AND_ISSUE_ONE_WAY_NOTIFICATION_ACCEPTED",n.MeterFaultAndIssueOneWayNotificationRejected="METER_FAULT_AND_ISSUE_ONE_WAY_NOTIFICATION_REJECTED",n.MoveIn="MOVE_IN",n.MoveInCesLifeSupportRequired="MOVE_IN_CES_LIFE_SUPPORT_REQUIRED",n.MoveInCommsNotDelivered="MOVE_IN_COMMS_NOT_DELIVERED",n.MoveInDefaultPaymentScheduleFailed="MOVE_IN_DEFAULT_PAYMENT_SCHEDULE_FAILED",n.MoveInMoveOutManualProcess="MOVE_IN_MOVE_OUT_MANUAL_PROCESS",n.MoveOut="MOVE_OUT",n.NetworkTariffOneWayNotification="NETWORK_TARIFF_ONE_WAY_NOTIFICATION",n.NewPsrAddedToPrepayAccount="NEW_PSR_ADDED_TO_PREPAY_ACCOUNT",n.NonEnergyPaymentCallReminder="NON_ENERGY_PAYMENT_CALL_REMINDER",n.NoticeOfMeteringWorksOneWayNotification="NOTICE_OF_METERING_WORKS_ONE_WAY_NOTIFICATION",n.ObsoleteBillingAmendedStandingDataRegisterChanged="OBSOLETE_BILLING_AMENDED_STANDING_DATA_REGISTER_CHANGED",n.ObsoleteBillingAmendedStandingDataRegisterDeleted="OBSOLETE_BILLING_AMENDED_STANDING_DATA_REGISTER_DELETED",n.PaymentsFailedRepayment="PAYMENTS_FAILED_REPAYMENT",n.PaymentInstructionFailed="PAYMENT_INSTRUCTION_FAILED",n.PaymentPlan="PAYMENT_PLAN",n.PaymentPlanHardshipCompletion="PAYMENT_PLAN_HARDSHIP_COMPLETION",n.PaymentPlanHardshipCompletionWorkflowCancelled="PAYMENT_PLAN_HARDSHIP_COMPLETION_WORKFLOW_CANCELLED",n.PaymentPlanMissedInstalment="PAYMENT_PLAN_MISSED_INSTALMENT",n.PlannedInterruption="PLANNED_INTERRUPTION",n.PlannedInterruptionMedicalDependency="PLANNED_INTERRUPTION_MEDICAL_DEPENDENCY",n.PlannedInterruptionNotificationSentToLifeSupportCustomer="PLANNED_INTERRUPTION_NOTIFICATION_SENT_TO_LIFE_SUPPORT_CUSTOMER",n.PlannedInterruptionOneWayNotification="PLANNED_INTERRUPTION_ONE_WAY_NOTIFICATION",n.PlannedInterruptionOneWayNotificationRejected="PLANNED_INTERRUPTION_ONE_WAY_NOTIFICATION_REJECTED",n.PostHardshipCancellation="POST_HARDSHIP_CANCELLATION",n.PropertyAddressNeedsUpdate="PROPERTY_ADDRESS_NEEDS_UPDATE",n.PsrImportCouldNotIdentifyAccountUser="PSR_IMPORT_COULD_NOT_IDENTIFY_ACCOUNT_USER",n.SaConcessionStatementClosed="SA_CONCESSION_STATEMENT_CLOSED",n.ScheduledBillingAddressUpdate="SCHEDULED_BILLING_ADDRESS_UPDATE",n.ScheduledOccupierPackSend="SCHEDULED_OCCUPIER_PACK_SEND",n.ServiceOrderAcknowledgementOverdue="SERVICE_ORDER_ACKNOWLEDGEMENT_OVERDUE",n.ServiceOrderCancellationFailed="SERVICE_ORDER_CANCELLATION_FAILED",n.ServiceOrderCancellationRequestRejected="SERVICE_ORDER_CANCELLATION_REQUEST_REJECTED",n.ServiceOrderFailed="SERVICE_ORDER_FAILED",n.ServiceOrderInitialResponseOverdue="SERVICE_ORDER_INITIAL_RESPONSE_OVERDUE",n.ServiceOrderNotCompleted="SERVICE_ORDER_NOT_COMPLETED",n.ServiceOrderOtherJobEnquiryCode="SERVICE_ORDER_OTHER_JOB_ENQUIRY_CODE",n.ServiceOrderPartiallyCompleted="SERVICE_ORDER_PARTIALLY_COMPLETED",n.ServiceOrderRequestRejected="SERVICE_ORDER_REQUEST_REJECTED",n.ServiceOrderUnableToCharge="SERVICE_ORDER_UNABLE_TO_CHARGE",n.ServiceOrderUnsolicitedReceived="SERVICE_ORDER_UNSOLICITED_RECEIVED",n.ServiceOrderUnsolicitedReceivedDeenergisedMeterPoint="SERVICE_ORDER_UNSOLICITED_RECEIVED_DEENERGISED_METER_POINT",n.SmartChangeOfTenancyInProgress="SMART_CHANGE_OF_TENANCY_IN_PROGRESS",n.SmartChangeOfTenancyRequestFailed="SMART_CHANGE_OF_TENANCY_REQUEST_FAILED",n.SmartMeterModeChangeUnsupported="SMART_METER_MODE_CHANGE_UNSUPPORTED",n.SmartPrepayAddDebtFailure="SMART_PREPAY_ADD_DEBT_FAILURE",n.SmartPrepayNeedToAdjustDebt="SMART_PREPAY_NEED_TO_ADJUST_DEBT",n.SmartPrepayTopUpFailure="SMART_PREPAY_TOP_UP_FAILURE",n.SmartPrepayTopUpMultipleActiveProcesses="SMART_PREPAY_TOP_UP_MULTIPLE_ACTIVE_PROCESSES",n.SmartPrepayTopUpUtrn="SMART_PREPAY_TOP_UP_UTRN",n.Smets2DataRequestFollowup="SMETS2_DATA_REQUEST_FOLLOWUP",n.Smets2HealthCheck="SMETS2_HEALTH_CHECK",n.Smets2IhdHealthCheck="SMETS2_IHD_HEALTH_CHECK",n.SolarExportCreditsExcess="SOLAR_EXPORT_CREDITS_EXCESS",n.SolrFinalBillReminder="SOLR_FINAL_BILL_REMINDER",n.SpecialReadCancellationFailed="SPECIAL_READ_CANCELLATION_FAILED",n.SpecialReadFailed="SPECIAL_READ_FAILED",n.SpecialReadOutstanding="SPECIAL_READ_OUTSTANDING",n.SpecialReadWithEstimateReadReceived="SPECIAL_READ_WITH_ESTIMATE_READ_RECEIVED",n.WithdrawalReceived="WITHDRAWAL_RECEIVED",n.WorkflowCancellationFailed="WORKFLOW_CANCELLATION_FAILED",n.WorkflowStepErrored="WORKFLOW_STEP_ERRORED",n.WorkflowStepFailed="WORKFLOW_STEP_FAILED"}(Ui||(Ui={})),function(n){n.Approved="APPROVED",n.Failed="FAILED",n.Historic="HISTORIC",n.Paid="PAID",n.Requested="REQUESTED",n.Submitted="SUBMITTED",n.ThirdParty="THIRD_PARTY"}(Fi||(Fi={})),function(n){n.Closed="CLOSED",n.Open="OPEN"}(vi||(vi={})),function(n){n.Active="ACTIVE",n.Dormant="DORMANT",n.EnrolmentError="ENROLMENT_ERROR",n.EnrolmentRejected="ENROLMENT_REJECTED",n.Incomplete="INCOMPLETE",n.Pending="PENDING",n.Void="VOID",n.Withdrawn="WITHDRAWN"}($i||($i={})),function(n){n.Active="ACTIVE",n.Dormant="DORMANT",n.EnrolmentError="ENROLMENT_ERROR",n.EnrolmentRejected="ENROLMENT_REJECTED",n.Incomplete="INCOMPLETE",n.Pending="PENDING",n.Withdrawn="WITHDRAWN"}(ji||(ji={})),function(n){n.Business="BUSINESS",n.BusinessOccupier="BUSINESS_OCCUPIER",n.Domestic="DOMESTIC",n.Managed="MANAGED",n.Occupier="OCCUPIER",n.PortfolioLead="PORTFOLIO_LEAD"}(hi||(hi={})),function(n){n.Admin="ADMIN",n.MainAccountHolder="MAIN_ACCOUNT_HOLDER"}(Gi||(Gi={})),function(n){n.Business="BUSINESS",n.Domestic="DOMESTIC",n.Unknown="UNKNOWN"}(Bi||(Bi={})),function(n){n.Accepted="ACCEPTED",n.Rejected="REJECTED",n.Requested="REQUESTED",n.Terminated="TERMINATED",n.TerminationRequested="TERMINATION_REQUESTED"}(Hi||(Hi={})),function(n){n.Center="CENTER",n.End="END",n.Start="START"}(qi||(qi={})),function(n){n.Aborted="ABORTED",n.Booked="BOOKED",n.Cancelled="CANCELLED",n.Completed="COMPLETED"}(Vi||(Vi={})),function(n){n.CreditNote="CREDIT_NOTE",n.Invoice="INVOICE",n.PreKraken="PRE_KRAKEN",n.Statement="STATEMENT"}(wi||(wi={})),function(n){n.FromDateDesc="FROM_DATE_DESC",n.IssuedDateDesc="ISSUED_DATE_DESC"}(ki||(ki={})),function(n){n.EonNext="EON_NEXT",n.Sainsburys="SAINSBURYS"}(Yi||(Yi={})),function(n){n.AlreadyReceivedDiscount="ALREADY_RECEIVED_DISCOUNT",n.ApplicationsNotOpen="APPLICATIONS_NOT_OPEN",n.BusinessAccount="BUSINESS_ACCOUNT",n.Duplicate="DUPLICATE",n.HasCoreGroupDiscount="HAS_CORE_GROUP_DISCOUNT",n.HasOpenApplication="HAS_OPEN_APPLICATION",n.InsufficientEvidenceProvided="INSUFFICIENT_EVIDENCE_PROVIDED",n.NonDomesticMeterPoint="NON_DOMESTIC_METER_POINT",n.NotInScotland="NOT_IN_SCOTLAND",n.NoLongerOnSupply="NO_LONGER_ON_SUPPLY"}(Wi||(Wi={})),function(n){n.Charity="CHARITY",n.Church="CHURCH",n.Government="GOVERNMENT",n.Limited="LIMITED",n.LimitedLiabilityPartnership="LIMITED_LIABILITY_PARTNERSHIP",n.NonProfit="NON_PROFIT",n.Partnership="PARTNERSHIP",n.ProprietaryLimitedCompany="PROPRIETARY_LIMITED_COMPANY",n.PublicLimitedCompany="PUBLIC_LIMITED_COMPANY",n.SoleTrader="SOLE_TRADER",n.TradingAs="TRADING_AS",n.Trust="TRUST"}(xi||(xi={})),function(n){n.Primary="PRIMARY",n.Secondary="SECONDARY",n.Tertiary="TERTIARY"}(Ki||(Ki={})),function(n){n.Filled="FILLED",n.Outlined="OUTLINED",n.TextOnly="TEXT_ONLY"}(Qi||(Qi={})),function(n){n.Cradle="CRADLE",n.Esme="ESME",n.HotShoe="HOT_SHOE"}(Xi||(Xi={})),function(n){n.AerialFault="AERIAL_FAULT",n.DamagedCase="DAMAGED_CASE",n.DamagedConnector="DAMAGED_CONNECTOR",n.EnvironmentalConditionsExceeded="ENVIRONMENTAL_CONDITIONS_EXCEEDED",n.IllegalInterferenceOrMissingSeals="ILLEGAL_INTERFERENCE_OR_MISSING_SEALS",n.LedFault="LED_FAULT",n.ManufacturingDefect="MANUFACTURING_DEFECT",n.SmHanFault="SM_HAN_FAULT",n.SmWanFault="SM_WAN_FAULT"}(Ji||(Ji={})),function(n){n.PostInstallation="POST_INSTALLATION",n.PriorToInstallation="PRIOR_TO_INSTALLATION"}(zi||(zi={})),function(n){n.New="NEW",n.Replacement="REPLACEMENT"}(Zi||(Zi={})),function(n){n.BasementOrCellar="BASEMENT_OR_CELLAR",n.DeepIndoors="DEEP_INDOORS",n.IndoorsOnExternalWall="INDOORS_ON_EXTERNAL_WALL",n.Outside="OUTSIDE"}(nr||(nr={})),function(n){n.DualSupplierHanVariantReplacement="DUAL_SUPPLIER_HAN_VARIANT_REPLACEMENT",n.General="GENERAL",n.LostOrStolenHub="LOST_OR_STOLEN_HUB",n.NonDomesticOptOut="NON_DOMESTIC_OPT_OUT",n.SmWanVariantReplacement="SM_WAN_VARIANT_REPLACEMENT"}(er||(er={})),function(n){n.FlexiOrb="FLEXI_ORB",n.Mcs="MCS"}(tr||(tr={})),function(n){n.Approved="APPROVED",n.Cancelled="CANCELLED",n.Cleared="CLEARED",n.Failed="FAILED",n.HeldForReview="HELD_FOR_REVIEW",n.None="NONE",n.Pending="PENDING",n.Requested="REQUESTED",n.Scheduled="SCHEDULED"}(ar||(ar={})),function(n){n.Administration="ADMINISTRATION",n.B2BDisconnectionProcess="B2B_DISCONNECTION_PROCESS",n.Bankruptcy="BANKRUPTCY",n.Cva="CVA",n.DebtArrangementSchemeDas="DEBT_ARRANGEMENT_SCHEME_DAS",n.DebtCollectionAgency="DEBT_COLLECTION_AGENCY",n.Deceased="DECEASED",n.Dro="DRO",n.FailedArrangement="FAILED_ARRANGEMENT",n.FinalB2B="FINAL_B2B",n.FinalDebtCollection="FINAL_DEBT_COLLECTION",n.FinalDebtCollection_2="FINAL_DEBT_COLLECTION_2",n.FirstPlacement="FIRST_PLACEMENT",n.HighRisk="HIGH_RISK",n.HomeVisit="HOME_VISIT",n.Insolvent="INSOLVENT",n.Iva="IVA",n.Liquidation="LIQUIDATION",n.Litigation="LITIGATION",n.LiveB2B="LIVE_B2B",n.LowRisk="LOW_RISK",n.MediumRisk="MEDIUM_RISK",n.Occupier="OCCUPIER",n.PersistentDebt="PERSISTENT_DEBT",n.Ptso="PTSO",n.Pva="PVA",n.SecondPlacement="SECOND_PLACEMENT",n.Sequestration="SEQUESTRATION",n.StopVendHigh="STOP_VEND_HIGH",n.StopVendLow="STOP_VEND_LOW",n.SwitchToSmartPayg="SWITCH_TO_SMART_PAYG",n.ThirdParty="THIRD_PARTY",n.Trace="TRACE",n.TraceAndCollect="TRACE_AND_COLLECT",n.TrustDeed="TRUST_DEED",n.VulnerabilityVisit="VULNERABILITY_VISIT",n.VulnerableCustomer="VULNERABLE_CUSTOMER"}(ir||(ir={})),function(n){n.Card="CARD",n.DirectDebit="DIRECT_DEBIT"}(rr||(rr={})),function(n){n.Email="EMAIL",n.PostalMail="POSTAL_MAIL"}(or||(or={})),function(n){n.FaultReturn="FAULT_RETURN",n.NoFaultReturn="NO_FAULT_RETURN",n.NoSmWan="NO_SM_WAN",n.Success="SUCCESS"}(dr||(dr={})),function(n){n.SendAll="SEND_ALL",n.SendOnlyJobCompleted="SEND_ONLY_JOB_COMPLETED",n.SuppressAll="SUPPRESS_ALL"}(cr||(cr={})),function(n){n.Day="DAY",n.HalfHour="HALF_HOUR",n.Hour="HOUR",n.Month="MONTH",n.Quarter="QUARTER",n.QuarterHour="QUARTER_HOUR",n.Week="WEEK"}(sr||(sr={})),function(n){n.Mj="MJ",n.KWh="kWh"}(ur||(ur={})),function(n){n.AdultDisabilityPayment="ADULT_DISABILITY_PAYMENT",n.AgeThreshold="AGE_THRESHOLD",n.DependentChildOverFive="DEPENDENT_CHILD_OVER_FIVE",n.DependentChildUnderFive="DEPENDENT_CHILD_UNDER_FIVE",n.DisabilityBenefits="DISABILITY_BENEFITS",n.HasDisability="HAS_DISABILITY",n.IncomeRelatedBenefits="INCOME_RELATED_BENEFITS",n.LimitedCapabilityForWork="LIMITED_CAPABILITY_FOR_WORK",n.MaternityExemptionCertificate="MATERNITY_EXEMPTION_CERTIFICATE",n.PersonalIndependencePayments="PERSONAL_INDEPENDENCE_PAYMENTS"}(Er||(Er={})),function(n){n.Notified="NOTIFIED",n.NotNotified="NOT_NOTIFIED",n.Unknown="UNKNOWN"}(mr||(mr={})),function(n){n.ArrearsToClient="ARREARS_TO_CLIENT",n.Bankrupt="BANKRUPT",n.ConfirmedEmpty="CONFIRMED_EMPTY",n.Cos="COS",n.CotCos="COT_COS",n.CotNoProof="COT_NO_PROOF",n.CotProofSeen="COT_PROOF_SEEN",n.Deceased="DECEASED",n.Demolished="DEMOLISHED",n.EnrolledInError="ENROLLED_IN_ERROR",n.Exp="EXP",n.GoneAway="GONE_AWAY",n.HighLevelComplaint="HIGH_LEVEL_COMPLAINT",n.InsolvenciesDealing="INSOLVENCIES_DEALING",n.InPrison="IN_PRISON",n.LiveToFinal="LIVE_TO_FINAL",n.LowBalance="LOW_BALANCE",n.NegativeTrace="NEGATIVE_TRACE",n.PaidInFull="PAID_IN_FULL",n.PartialSettlement="PARTIAL_SETTLEMENT",n.PartPayment="PART_PAYMENT",n.PaymentArrangement="PAYMENT_ARRANGEMENT",n.PaymentPlanAgreed="PAYMENT_PLAN_AGREED",n.PpmArrangement="PPM_ARRANGEMENT",n.PpmFitted="PPM_FITTED",n.PpmRequested="PPM_REQUESTED",n.ProcessExhausted="PROCESS_EXHAUSTED",n.ProcessExhaustedContact="PROCESS_EXHAUSTED_CONTACT",n.ProcessExhaustedNoContact="PROCESS_EXHAUSTED_NO_CONTACT",n.Query="QUERY",n.ReducedSettlement="REDUCED_SETTLEMENT",n.RefusedToDeal="REFUSED_TO_DEAL",n.UnableToLocateProperty="UNABLE_TO_LOCATE_PROPERTY",n.UnableToTrace="UNABLE_TO_TRACE",n.Vulnerable="VULNERABLE",n.Withdrawn="WITHDRAWN",n.WriteOff="WRITE_OFF"}(lr||(lr={})),function(n){n.Failed="FAILED",n.Successful="SUCCESSFUL"}(Tr||(Tr={})),function(n){n.Commissioned="COMMISSIONED",n.Decommissioned="DECOMMISSIONED",n.InstalledNotCommissioned="INSTALLED_NOT_COMMISSIONED",n.NotApplicable="NOT_APPLICABLE",n.Pending="PENDING",n.Recovered="RECOVERED",n.Recovery="RECOVERY",n.Suspended="SUSPENDED",n.Whitelisted="WHITELISTED",n.Withdrawn="WITHDRAWN"}(pr||(pr={})),function(n){n.Commissioned="COMMISSIONED",n.Decommissioned="DECOMMISSIONED",n.InstalledNotCommissioned="INSTALLED_NOT_COMMISSIONED",n.NotApplicable="NOT_APPLICABLE",n.Pending="PENDING",n.Recovered="RECOVERED",n.Recovery="RECOVERY",n.Suspended="SUSPENDED",n.Whitelisted="WHITELISTED",n.Withdrawn="WITHDRAWN"}(Nr||(Nr={})),function(n){n.Cad="CAD",n.Chf="CHF",n.Esme="ESME",n.Gpf="GPF",n.Gsme="GSME",n.Hcalcs="HCALCS",n.Ihd="IHD",n.IhdOrCad="IHD_OR_CAD",n.Ppmid="PPMID"}(_r||(_r={})),function(n){n.AccountClosed="ACCOUNT_CLOSED",n.Active="ACTIVE",n.Failed="FAILED",n.Provisional="PROVISIONAL"}(Ir||(Ir={})),function(n){n.Da="DA",n.Dc="DC",n.Ds="DS",n.Mop="MOP",n.Ms="MS"}(Or||(Or={})),function(n){n.A_2Adef="A_2ADEF",n.A_2Adf="A_2ADF",n.A_2Aef="A_2AEF",n.A_2Af="A_2AF",n.A_2Bdef="A_2BDEF",n.A_2Bdf="A_2BDF",n.A_2Bef="A_2BEF",n.A_2Bf="A_2BF",n.A_2Cdef="A_2CDEF",n.A_2Cdf="A_2CDF",n.A_2Cef="A_2CEF",n.A_2Cf="A_2CF",n.Check="CHECK",n.H="H",n.K="K",n.Lag="LAG_",n.Lead="LEAD_",n.Main="MAIN_",n.N="N",n.Ncamr="NCAMR",n.Nss="NSS",n.Rcamr="RCAMR",n.Rcamy="RCAMY",n.S="S",n.S1="S1",n.S2A="S2A",n.S2Ad="S2AD",n.S2Ade="S2ADE",n.S2B="S2B",n.S2Bd="S2BD",n.S2Bde="S2BDE",n.S2C="S2C",n.S2Cd="S2CD",n.S2Cde="S2CDE",n.Specl="SPECL",n.T="T"}(Sr||(Sr={})),function(n){n.K="K",n.S="S",n.T="T"}(Rr||(Rr={})),function(n){n.SinglePhase="SINGLE_PHASE",n.ThreePhase="THREE_PHASE"}(Ar||(Ar={})),function(n){n.Html="HTML",n.Text="TEXT"}(fr||(fr={})),function(n){n.Available="AVAILABLE",n.Unavailable="UNAVAILABLE"}(Cr||(Cr={})),function(n){n.Export="EXPORT",n.Import="IMPORT"}(gr||(gr={})),function(n){n.Business="BUSINESS",n.Domestic="DOMESTIC",n.Fixed="FIXED",n.Green="GREEN",n.Prepay="PREPAY",n.Smart="SMART",n.Variable="VARIABLE"}(yr||(yr={})),function(n){n.Cancelled="CANCELLED",n.Completed="COMPLETED",n.Errored="ERRORED",n.Failed="FAILED",n.InProgress="IN_PROGRESS",n.NotStarted="NOT_STARTED"}(br||(br={})),function(n){n.Accepted="ACCEPTED",n.Completed="COMPLETED",n.Disputed="DISPUTED",n.ObjectionReceived="OBJECTION_RECEIVED",n.PreRegistration="PRE_REGISTRATION",n.RegistrationObjected="REGISTRATION_OBJECTED",n.Rejected="REJECTED",n.Requested="REQUESTED",n.Withdrawn="WITHDRAWN"}(Dr||(Dr={})),function(n){n.Cancelled="CANCELLED",n.Completed="COMPLETED",n.Errored="ERRORED",n.Failed="FAILED",n.InProgress="IN_PROGRESS",n.Pending="PENDING",n.Skipped="SKIPPED",n.Stalled="STALLED"}(Pr||(Pr={})),function(n){n.AcceptTermsAndConditions="ACCEPT_TERMS_AND_CONDITIONS",n.BookSmartMeterAppointments="BOOK_SMART_METER_APPOINTMENTS",n.CheckoutQuote="CHECKOUT_QUOTE",n.EditCustomerMarketingPreference="EDIT_CUSTOMER_MARKETING_PREFERENCE",n.GenerateRefreshToken="GENERATE_REFRESH_TOKEN",n.JoinCampaigns="JOIN_CAMPAIGNS",n.JoinCampaignEvents="JOIN_CAMPAIGN_EVENTS",n.ManageAccountRenewals="MANAGE_ACCOUNT_RENEWALS",n.ManageGoodsPurchases="MANAGE_GOODS_PURCHASES",n.ManageProductSwitch="MANAGE_PRODUCT_SWITCH",n.RedeemLoyaltyPoints="REDEEM_LOYALTY_POINTS",n.ReportMoveOut="REPORT_MOVE_OUT",n.SubmitCustomerFeedback="SUBMIT_CUSTOMER_FEEDBACK",n.SubmitMeterReadings="SUBMIT_METER_READINGS",n.UpdateBlackholeEmail="UPDATE_BLACKHOLE_EMAIL",n.ViewCampaignDashboards="VIEW_CAMPAIGN_DASHBOARDS",n.ViewDetailedUsage="VIEW_DETAILED_USAGE"}(Mr||(Mr={})),function(n){n.Hydro="HYDRO",n.Solar="SOLAR",n.SolarAndStorage="SOLAR_AND_STORAGE",n.Storage="STORAGE",n.Wind="WIND",n.WindAndStorage="WIND_AND_STORAGE"}(Lr||(Lr={})),function(n){n.Communications="COMMUNICATIONS",n.Debt="DEBT",n.Messaging="MESSAGING",n.Mobile="MOBILE",n.Web="WEB"}(Ur||(Ur={})),function(n){n.Html="HTML",n.Link="LINK",n.Plaintext="PLAINTEXT",n.S3="S3"}(Fr||(Fr={})),function(n){n.ClickToCall="CLICK_TO_CALL",n.Dunning="DUNNING",n.Email="EMAIL",n.Feedback="FEEDBACK",n.Print="PRINT",n.PushNotification="PUSH_NOTIFICATION",n.Sms="SMS",n.SocialMedia="SOCIAL_MEDIA",n.Telephone="TELEPHONE",n.Whatsapp="WHATSAPP"}(vr||(vr={})),function(n){n.None="NONE",n.Owner="OWNER",n.PreviousOwner="PREVIOUS_OWNER",n.ThirdPartyOwned="THIRD_PARTY_OWNED",n.Unknown="UNKNOWN"}($r||($r={})),function(n){n.Covid_19FinancialEnergyAssessment="COVID_19_FINANCIAL_ENERGY_ASSESSMENT",n.Covid_19GasPricesFinancialEnergyAssessment="COVID_19_GAS_PRICES_FINANCIAL_ENERGY_ASSESSMENT"}(jr||(jr={})),function(n){n.DualFuel="DUAL_FUEL",n.Electricity="ELECTRICITY",n.Gas="GAS"}(hr||(hr={})),function(n){n.DualFuel="DUAL_FUEL",n.Electricity="ELECTRICITY",n.Gas="GAS"}(Gr||(Gr={})),function(n){n.Mam="MAM",n.Mra="MRA"}(Br||(Br={})),function(n){n.Cm="CM",n.Cr="CR",n.Et="ET",n.Mt="MT",n.Ns="NS",n.Pp="PP",n.S1="S1",n.S2="S2",n.Th="TH",n.U="U"}(Hr||(Hr={})),function(n){n.Lsp="LSP",n.Ssp="SSP"}(qr||(qr={})),function(n){n.D="D",n.I="I"}(Vr||(Vr={})),function(n){n.C="C",n.S="S",n.T="T"}(wr||(wr={})),function(n){n.Ca="CA",n.Cl="CL",n.Cu="CU",n.Fa="FA",n.In="IN",n.Li="LI",n.Ni="NI",n.Ot="OT",n.Re="RE",n.Sp="SP",n.Un="UN"}(kr||(kr={})),function(n){n.Et="ET",n.Pp="PP"}(Yr||(Yr={})),function(n){n.Medium="MEDIUM",n.Standard="STANDARD"}(Wr||(Wr={})),function(n){n.ExternalReference="EXTERNAL_REFERENCE",n.RetailerReferral="RETAILER_REFERRAL",n.SelfIdentified="SELF_IDENTIFIED"}(xr||(xr={})),function(n){n.DeathInFamily="DEATH_IN_FAMILY",n.FamilyViolence="FAMILY_VIOLENCE",n.HouseholdIllness="HOUSEHOLD_ILLNESS",n.Other="OTHER",n.ReducedIncome="REDUCED_INCOME",n.Unemployment="UNEMPLOYMENT"}(Kr||(Kr={})),function(n){n.Email="EMAIL",n.Post="POST",n.Sms="SMS"}(Qr||(Qr={})),function(n){n.Closed="CLOSED",n.Open="OPEN",n.OpenCustomerReplied="OPEN_CUSTOMER_REPLIED",n.OpenNew="OPEN_NEW",n.OpenReminded="OPEN_REMINDED",n.Snoozed="SNOOZED"}(Xr||(Xr={})),function(n){n.Delivered="DELIVERED",n.Failed="FAILED",n.OutsideReplyWindow="OUTSIDE_REPLY_WINDOW",n.Pending="PENDING",n.Sent="SENT"}(Jr||(Jr={})),function(n){n.Inbound="INBOUND",n.Outbound="OUTBOUND"}(zr||(zr={})),function(n){n.Monthly="MONTHLY",n.Quarterly="QUARTERLY"}(Zr||(Zr={})),function(n){n.AltHan="ALT_HAN",n.Cad="CAD",n.Ihd="IHD",n.Ppmid="PPMID"}(no||(no={})),function(n){n.AuxSwitch="AUX_SWITCH",n.ElectricityMeter="ELECTRICITY_METER",n.GasMeter="GAS_METER",n.Ihd="IHD",n.Ppmid="PPMID"}(eo||(eo={})),function(n){n.Day="DAY",n.HalfHour="HALF_HOUR",n.Hour="HOUR",n.Month="MONTH",n.None="NONE",n.Quarter="QUARTER",n.Week="WEEK"}(to||(to={})),function(n){n.ConsumptionCharge="CONSUMPTION_CHARGE",n.StandingCharge="STANDING_CHARGE"}(ao||(ao={})),function(n){n.AlreadyLinked="ALREADY_LINKED",n.NoMatchingLineLink="NO_MATCHING_LINE_LINK"}(io||(io={})),function(n){n.InTraining="IN_TRAINING",n.NotApplicable="NOT_APPLICABLE",n.Qualified="QUALIFIED"}(ro||(ro={})),function(n){n.Account="ACCOUNT",n.AccountUser="ACCOUNT_USER"}(oo||(oo={})),function(n){n.MaxAllowedToRequestViaDashboard="MAX_ALLOWED_TO_REQUEST_VIA_DASHBOARD",n.MaxAvailableAmount="MAX_AVAILABLE_AMOUNT",n.TotalAmountPaidViaActiveDdi="TOTAL_AMOUNT_PAID_VIA_ACTIVE_DDI"}(co||(co={})),function(n){n.Email="EMAIL",n.Intercom="INTERCOM",n.Junifer="JUNIFER",n.Print="PRINT",n.PushNotification="PUSH_NOTIFICATION",n.Sms="SMS"}(so||(so={})),function(n){n.ChangeOfSupply="CHANGE_OF_SUPPLY",n.Customer="CUSTOMER",n.DataCollector="DATA_COLLECTOR",n.Estimate="ESTIMATE",n.MeterExchange="METER_EXCHANGE",n.Prepay="PREPAY",n.PreSupplier="PRE_SUPPLIER",n.SmartMeter="SMART_METER"}(uo||(uo={})),function(n){n.OnSite="ON_SITE",n.Removed="REMOVED"}(Eo||(Eo={})),function(n){n.Economy7="ECONOMY7",n.FlatEconomy7="FLAT_ECONOMY7",n.FlatThreeRate="FLAT_THREE_RATE",n.Smart="SMART",n.SmartEconomy7="SMART_ECONOMY7",n.SmartFlatEconomy7="SMART_FLAT_ECONOMY7",n.Standard="STANDARD",n.ThreeRate="THREE_RATE"}(mo||(mo={})),function(n){n.ElectricityMeter="ELECTRICITY_METER",n.GasMeter="GAS_METER"}(lo||(lo={})),function(n){n.Economy7="ECONOMY7",n.FlatEconomy7="FLAT_ECONOMY7",n.FlatThreeRate="FLAT_THREE_RATE",n.NoMeter="NO_METER",n.Other="OTHER",n.Smart="SMART",n.SmartEconomy7="SMART_ECONOMY7",n.SmartFlatEconomy7="SMART_FLAT_ECONOMY7",n.Standard="STANDARD",n.ThreeRate="THREE_RATE"}(To||(To={})),function(n){n.CheckMeter="CHECK_METER",n.Smets1="SMETS1",n.Smets2="SMETS2",n.Traditional="TRADITIONAL"}(po||(po={})),function(n){n.Eco7Day="ECO7_DAY",n.Eco7Night="ECO7_NIGHT",n.OffPeak="OFF_PEAK",n.Standard="STANDARD"}(No||(No={})),function(n){n.Pinpoint="PINPOINT"}(_o||(_o={})),function(n){n.Apns="APNS",n.ApnsSandbox="APNS_SANDBOX",n.Gcm="GCM"}(Io||(Io={})),function(n){n.Monthly="Monthly",n.Planned="Planned",n.Weekly="Weekly"}(Oo||(Oo={})),function(n){n.DirectDebit="DIRECT_DEBIT",n.NonDirectDebit="NON_DIRECT_DEBIT",n.Prepayment="PREPAYMENT"}(So||(So={})),function(n){n.CreditCard="CREDIT_CARD",n.DirectDebit="DIRECT_DEBIT",n.PayOnReceipt="PAY_ON_RECEIPT"}(Ro||(Ro={})),function(n){n.Credit="CREDIT",n.Prepay="PREPAY"}(Ao||(Ao={})),function(n){n.BalanceThresholdCrossed="BALANCE_THRESHOLD_CROSSED",n.BillIssued="BILL_ISSUED",n.PaymentPlan="PAYMENT_PLAN",n.RegularSchedule="REGULAR_SCHEDULE"}(fo||(fo={})),function(n){n.DebtRepaymentPlan="DEBT_REPAYMENT_PLAN",n.FinalPayment="FINAL_PAYMENT",n.GeneralAccountPayment="GENERAL_ACCOUNT_PAYMENT",n.SsdPayment="SSD_PAYMENT"}(Co||(Co={})),function(n){n.Card="CARD",n.DirectDebit="DIRECT_DEBIT",n.GmoRefund="GMO_REFUND",n.PaymentSlip="PAYMENT_SLIP"}(go||(go={})),function(n){n.Gocardless="GOCARDLESS",n.Smartdebit="SMARTDEBIT",n.Stripe="STRIPE",n.Westpac="WESTPAC"}(yo||(yo={})),function(n){n.Admin="ADMIN",n.MainAccountHolder="MAIN_ACCOUNT_HOLDER"}(bo||(bo={})),function(n){n.AcceptTermsAndConditions="ACCEPT_TERMS_AND_CONDITIONS",n.BookSmartMeterAppointments="BOOK_SMART_METER_APPOINTMENTS",n.CheckoutQuote="CHECKOUT_QUOTE",n.EditCustomerMarketingPreference="EDIT_CUSTOMER_MARKETING_PREFERENCE",n.GenerateRefreshToken="GENERATE_REFRESH_TOKEN",n.JoinCampaigns="JOIN_CAMPAIGNS",n.JoinCampaignEvents="JOIN_CAMPAIGN_EVENTS",n.ManageAccountRenewals="MANAGE_ACCOUNT_RENEWALS",n.ManageGoodsPurchases="MANAGE_GOODS_PURCHASES",n.ManageProductSwitch="MANAGE_PRODUCT_SWITCH",n.RedeemLoyaltyPoints="REDEEM_LOYALTY_POINTS",n.ReportMoveOut="REPORT_MOVE_OUT",n.SubmitCustomerFeedback="SUBMIT_CUSTOMER_FEEDBACK",n.SubmitMeterReadings="SUBMIT_METER_READINGS",n.UpdateBlackholeEmail="UPDATE_BLACKHOLE_EMAIL",n.ViewCampaignDashboards="VIEW_CAMPAIGN_DASHBOARDS",n.ViewDetailedUsage="VIEW_DETAILED_USAGE"}(Do||(Do={})),function(n){n.DetachedOrSemi="DETACHED_OR_SEMI",n.HighRiseApartment="HIGH_RISE_APARTMENT",n.LowRiseApartment="LOW_RISE_APARTMENT",n.Terraced="TERRACED"}(Po||(Po={})),function(n){n.Closed="CLOSED",n.Open="OPEN",n.Processed="PROCESSED"}(Mo||(Mo={})),function(n){n.AdultDisabilityPayment="ADULT_DISABILITY_PAYMENT",n.AgeThreshold="AGE_THRESHOLD",n.DependentChildOverFive="DEPENDENT_CHILD_OVER_FIVE",n.DependentChildUnderFive="DEPENDENT_CHILD_UNDER_FIVE",n.DisabilityBenefits="DISABILITY_BENEFITS",n.HasDisability="HAS_DISABILITY",n.IncomeRelatedBenefits="INCOME_RELATED_BENEFITS",n.LimitedCapabilityForWork="LIMITED_CAPABILITY_FOR_WORK",n.MaternityExemptionCertificate="MATERNITY_EXEMPTION_CERTIFICATE",n.MedicalExemptionCertificate="MEDICAL_EXEMPTION_CERTIFICATE",n.PersonalIndependencePayments="PERSONAL_INDEPENDENCE_PAYMENTS",n.PrescriptionChargesExemption="PRESCRIPTION_CHARGES_EXEMPTION",n.WarPensionExemptionCertificate="WAR_PENSION_EXEMPTION_CERTIFICATE"}(Lo||(Lo={})),function(n){n.ChildTaxCredit="CHILD_TAX_CREDIT",n.CouncilTaxReduction="COUNCIL_TAX_REDUCTION",n.EmploymentAndSupportAllowance="EMPLOYMENT_AND_SUPPORT_ALLOWANCE",n.HousingBenefit="HOUSING_BENEFIT",n.IncomeSupport="INCOME_SUPPORT",n.JobSeekersAllowance="JOB_SEEKERS_ALLOWANCE",n.LowIncomeThreshold="LOW_INCOME_THRESHOLD",n.SavingsElementOfPensionCredit="SAVINGS_ELEMENT_OF_PENSION_CREDIT",n.UniversalCredit="UNIVERSAL_CREDIT",n.WorkingTaxCredit="WORKING_TAX_CREDIT"}(Uo||(Uo={})),function(n){n.Creditcard="CREDITCARD",n.Directdebit="DIRECTDEBIT",n.Onreceipt="ONRECEIPT",n.Prepayment="PREPAYMENT"}(Fo||(Fo={})),function(n){n.Creditcard="CREDITCARD",n.Directdebit="DIRECTDEBIT",n.Onreceipt="ONRECEIPT",n.Prepayment="PREPAYMENT"}(vo||(vo={})),function(n){n.Economy7="ECONOMY7",n.Standard="STANDARD",n.ThreeRate="THREE_RATE"}($o||($o={})),function(n){n.Consumption="CONSUMPTION",n.Generation="GENERATION"}(jo||(jo={})),function(n){n.Daily="DAILY",n.DayInterval="DAY_INTERVAL",n.FifteenMinInterval="FIFTEEN_MIN_INTERVAL",n.FiveMinInterval="FIVE_MIN_INTERVAL",n.HourInterval="HOUR_INTERVAL",n.MonthInterval="MONTH_INTERVAL",n.PointInTime="POINT_IN_TIME",n.QuarterInterval="QUARTER_INTERVAL",n.RawInterval="RAW_INTERVAL",n.ThirtyMinInterval="THIRTY_MIN_INTERVAL",n.WeekInterval="WEEK_INTERVAL"}(ho||(ho={})),function(n){n.Actual="ACTUAL",n.Combined="COMBINED",n.Estimate="ESTIMATE"}(Go||(Go={})),function(n){n.CarbonCost="CARBON_COST",n.ConsumptionCost="CONSUMPTION_COST",n.GenerationValue="GENERATION_VALUE",n.StandingChargeCost="STANDING_CHARGE_COST",n.TouBucketCost="TOU_BUCKET_COST"}(Bo||(Bo={})),function(n){n.LegacyReferral="LEGACY_REFERRAL",n.PartnerReward="PARTNER_REWARD",n.PromoReward="PROMO_REWARD",n.ReferralReward="REFERRAL_REWARD",n.SignupReward="SIGNUP_REWARD"}(Ho||(Ho={})),function(n){n.Cancelled="Cancelled",n.Paid="Paid",n.Pending="Pending"}(qo||(qo={})),function(n){n.Cad="CAD"}(Vo||(Vo={})),function(n){n.BankTransfer="BANK_TRANSFER",n.Card="CARD",n.Cheque="CHEQUE"}(wo||(wo={})),function(n){n.Accepted="ACCEPTED",n.Cancelled="CANCELLED",n.Rejected="REJECTED",n.Requested="REQUESTED"}(ko||(ko={})),function(n){n.BankTransfer="BANK_TRANSFER",n.Cheque="CHEQUE"}(Yo||(Yo={})),function(n){n.Smets2InterestReasonCannotAttendAppointment="SMETS2_INTEREST_REASON_CANNOT_ATTEND_APPOINTMENT",n.Smets2InterestReasonCannotSeeBenefit="SMETS2_INTEREST_REASON_CANNOT_SEE_BENEFIT",n.Smets2InterestReasonCovidCaringForVulnerable="SMETS2_INTEREST_REASON_COVID_CARING_FOR_VULNERABLE",n.Smets2InterestReasonCovidDoNotWantPropertyVisitors="SMETS2_INTEREST_REASON_COVID_DO_NOT_WANT_PROPERTY_VISITORS",n.Smets2InterestReasonCovidSelfIsolating="SMETS2_INTEREST_REASON_COVID_SELF_ISOLATING",n.Smets2InterestReasonDoNotOwnHome="SMETS2_INTEREST_REASON_DO_NOT_OWN_HOME",n.Smets2InterestReasonDoNotWantToChangeSwitchingTimes="SMETS2_INTEREST_REASON_DO_NOT_WANT_TO_CHANGE_SWITCHING_TIMES",n.Smets2InterestReasonExclusionAlternativeHanEquipmentRequired="SMETS2_INTEREST_REASON_EXCLUSION_ALTERNATIVE_HAN_EQUIPMENT_REQUIRED",n.Smets2InterestReasonExclusionAsbestosOnSite="SMETS2_INTEREST_REASON_EXCLUSION_ASBESTOS_ON_SITE",n.Smets2InterestReasonExclusionBookAsTwoMtAppointment="SMETS2_INTEREST_REASON_EXCLUSION_BOOK_AS_TWO_MT_APPOINTMENT",n.Smets2InterestReasonExclusionCommunalCupboard="SMETS2_INTEREST_REASON_EXCLUSION_COMMUNAL_CUPBOARD",n.Smets2InterestReasonExclusionDeenOrMeterRemoval="SMETS2_INTEREST_REASON_EXCLUSION_DEEN_OR_METER_REMOVAL",n.Smets2InterestReasonExclusionDistributionWorkAtPropertyRequiredCatB="SMETS2_INTEREST_REASON_EXCLUSION_DISTRIBUTION_WORK_AT_PROPERTY_REQUIRED_CAT_B",n.Smets2InterestReasonExclusionDualBandCommsHubRequired="SMETS2_INTEREST_REASON_EXCLUSION_DUAL_BAND_COMMS_HUB_REQUIRED",n.Smets2InterestReasonExclusionFlatOrApartment="SMETS2_INTEREST_REASON_EXCLUSION_FLAT_OR_APARTMENT",n.Smets2InterestReasonExclusionFlueInLoft="SMETS2_INTEREST_REASON_EXCLUSION_FLUE_IN_LOFT",n.Smets2InterestReasonExclusionMediumPressureGas="SMETS2_INTEREST_REASON_EXCLUSION_MEDIUM_PRESSURE_GAS",n.Smets2InterestReasonExclusionNoSignalHan="SMETS2_INTEREST_REASON_EXCLUSION_NO_SIGNAL_HAN",n.Smets2InterestReasonExclusionNoSignalWan="SMETS2_INTEREST_REASON_EXCLUSION_NO_SIGNAL_WAN",n.Smets2InterestReasonExclusionPermanentMeterObstruction="SMETS2_INTEREST_REASON_EXCLUSION_PERMANENT_METER_OBSTRUCTION",n.Smets2InterestReasonExclusionRestrictedMeterSpace="SMETS2_INTEREST_REASON_EXCLUSION_RESTRICTED_METER_SPACE",n.Smets2InterestReasonExclusionSharedFuse="SMETS2_INTEREST_REASON_EXCLUSION_SHARED_FUSE",n.Smets2InterestReasonExclusionTemporaryMeterObstruction="SMETS2_INTEREST_REASON_EXCLUSION_TEMPORARY_METER_OBSTRUCTION",n.Smets2InterestReasonExclusionThreePhaseMeter="SMETS2_INTEREST_REASON_EXCLUSION_THREE_PHASE_METER",n.Smets2InterestReasonHouseMoveImminent="SMETS2_INTEREST_REASON_HOUSE_MOVE_IMMINENT",n.Smets2InterestReasonKeepMixMeterTypes="SMETS2_INTEREST_REASON_KEEP_MIX_METER_TYPES",n.Smets2InterestReasonLongTermOptOut="SMETS2_INTEREST_REASON_LONG_TERM_OPT_OUT",n.Smets2InterestReasonNotDecisionMaker="SMETS2_INTEREST_REASON_NOT_DECISION_MAKER",n.Smets2InterestReasonNoTimeToTalk="SMETS2_INTEREST_REASON_NO_TIME_TO_TALK",n.Smets2InterestReasonRecentBereavement="SMETS2_INTEREST_REASON_RECENT_BEREAVEMENT",n.Smets2InterestReasonSmartPaygNotSuitable="SMETS2_INTEREST_REASON_SMART_PAYG_NOT_SUITABLE",n.Smets2InterestReasonSwitchImminent="SMETS2_INTEREST_REASON_SWITCH_IMMINENT",n.Smets2InterestReasonWaitingForSmets2Payg="SMETS2_INTEREST_REASON_WAITING_FOR_SMETS2_PAYG",n.Smets2InterestReasonWorriedAboutInstallation="SMETS2_INTEREST_REASON_WORRIED_ABOUT_INSTALLATION",n.Smets2InterestReasonWorriedAboutUsageCost="SMETS2_INTEREST_REASON_WORRIED_ABOUT_USAGE_COST",n.Smets2InterestReasonWorriedHealthSafety="SMETS2_INTEREST_REASON_WORRIED_HEALTH_SAFETY",n.Smets2InterestReasonWorriedSecurity="SMETS2_INTEREST_REASON_WORRIED_SECURITY"}(Wo||(Wo={})),function(n){n.Acquisition="ACQUISITION",n.Aggregator="AGGREGATOR",n.Broker="BROKER",n.DebtCollectionAgency="DEBT_COLLECTION_AGENCY",n.DigiTelesales="DIGI_TELESALES",n.Direct="DIRECT",n.Events="EVENTS",n.FieldSales="FIELD_SALES",n.GiftOfKit="GIFT_OF_KIT",n.HighReferrer="HIGH_REFERRER",n.Landlord="LANDLORD",n.MoveIn="MOVE_IN",n.NewTenant="NEW_TENANT",n.ParentPower="PARENT_POWER",n.Partnerships="PARTNERSHIPS",n.PeoplePower="PEOPLE_POWER",n.PriceComparison="PRICE_COMPARISON",n.SupplierOfLastResort="SUPPLIER_OF_LAST_RESORT",n.Telesales="TELESALES",n.WorkplacePopUp="WORKPLACE_POP_UP",n.WorksWithOctopus="WORKS_WITH_OCTOPUS"}(xo||(xo={})),function(n){n.BacsTransfer="BACS_TRANSFER",n.CardPayment="CARD_PAYMENT",n.DirectDebit="DIRECT_DEBIT",n.PaymentSlip="PAYMENT_SLIP"}(Ko||(Ko={})),function(n){n.Aes="AES",n.Ecm="ECM",n.ElecNw="ELEC_NW",n.EnergyAssets="ENERGY_ASSETS",n.EnterpriseManaged="ENTERPRISE_MANAGED",n.EonMetering="EON_METERING",n.London="LONDON",n.LowriBeck="LOWRI_BECK",n.Mds="MDS",n.Meterplus="METERPLUS",n.MidsElec="MIDS_ELEC",n.NationalGrid="NATIONAL_GRID",n.NPowergrid="N_POWERGRID",n.Oes="OES",n.Oesl="OESL",n.Providor="PROVIDOR",n.Sgn="SGN",n.Siemens="SIEMENS",n.Sms="SMS"}(Qo||(Qo={})),function(n){n.Aborted="ABORTED",n.Booked="BOOKED",n.Cancelled="CANCELLED",n.Completed="COMPLETED"}(Xo||(Xo={})),function(n){n.SmicopComplianceReportSubmitted="SMICOP_COMPLIANCE_REPORT_SUBMITTED"}(Jo||(Jo={})),function(n){n.Interested="INTERESTED",n.NotAtTheMoment="NOT_AT_THE_MOMENT",n.NotInterested="NOT_INTERESTED"}(zo||(zo={})),function(n){n.Affiliate="AFFILIATE",n.Website="WEBSITE"}(Zo||(Zo={})),function(n){n.Daily="DAILY",n.HalfHourly="HALF_HOURLY",n.Monthly="MONTHLY"}(nd||(nd={})),function(n){n.AgreementsUpdated="AGREEMENTS_UPDATED",n.Cancelled="CANCELLED",n.Completed="COMPLETED",n.MeterExchangeBooked="METER_EXCHANGE_BOOKED",n.MeterExchangeEmailSent="METER_EXCHANGE_EMAIL_SENT",n.MeterInstalled="METER_INSTALLED",n.MeterReadingsAvailable="METER_READINGS_AVAILABLE",n.NoteAdded="NOTE_ADDED",n.PreviousAgreementBillingGapFilled="PREVIOUS_AGREEMENT_BILLING_GAP_FILLED",n.Started="STARTED",n.TariffChangedOnMeter="TARIFF_CHANGED_ON_METER",n.TariffSwitchConfirmationEmailSent="TARIFF_SWITCH_CONFIRMATION_EMAIL_SENT",n.TermsAccepted="TERMS_ACCEPTED",n.TermsEmailSent="TERMS_EMAIL_SENT",n.UnableToProceed="UNABLE_TO_PROCEED"}(ed||(ed={})),function(n){n.AgileOctopus="AGILE_OCTOPUS",n.CosyOctopus="COSY_OCTOPUS",n.IntelligentFlux="INTELLIGENT_FLUX",n.IntelligentOctopus="INTELLIGENT_OCTOPUS",n.OctopusFlux="OCTOPUS_FLUX",n.OctopusGo="OCTOPUS_GO",n.OctopusGoFaster="OCTOPUS_GO_FASTER",n.OctopusGoGreen="OCTOPUS_GO_GREEN",n.OutgoingAgile="OUTGOING_AGILE",n.OutgoingFixed="OUTGOING_FIXED",n.Powerloop="POWERLOOP",n.TeslaImport="TESLA_IMPORT"}(td||(td={})),function(n){n.TermsAcceptanceRequired="TERMS_ACCEPTANCE_REQUIRED",n.TermsAccepted="TERMS_ACCEPTED",n.TermsEmailSent="TERMS_EMAIL_SENT"}(ad||(ad={})),function(n){n.AcceptedByMeter="ACCEPTED_BY_METER",n.Resolved="RESOLVED",n.UtrnReceived="UTRN_RECEIVED",n.UtrnRequested="UTRN_REQUESTED"}(id||(id={})),function(n){n.Completed="COMPLETED",n.Failed="FAILED",n.Initiated="INITIATED",n.NotStarted="NOT_STARTED",n.Pending="PENDING",n.UtrnMustBeAppliedManually="UTRN_MUST_BE_APPLIED_MANUALLY"}(rd||(rd={})),function(n){n.Electricity="electricity",n.Gas="gas"}(od||(od={})),function(n){n.E7="E7",n.Ew="EW",n.Standard="STANDARD",n.ThreeRate="THREE_RATE"}(dd||(dd={})),function(n){n.Economy7="ECONOMY7",n.Standard="STANDARD",n.ThreeRate="THREE_RATE"}(cd||(cd={})),function(n){n.NoSongPreferred="NO_SONG_PREFERRED"}(sd||(sd={})),function(n){n.All="ALL",n.None="NONE",n.NotClosed="NOT_CLOSED",n.Some="SOME"}(ud||(ud={})),function(n){n.Approved="APPROVED",n.ApprovedCustomerServiceGesture="APPROVED_CUSTOMER_SERVICE_GESTURE",n.AwaitingAudit="AWAITING_AUDIT",n.AwaitingCustomerEvidence="AWAITING_CUSTOMER_EVIDENCE",n.Pending="PENDING",n.Rejected="REJECTED",n.Withdrawn="WITHDRAWN"}(Ed||(Ed={})),function(n){n.FiveMinutes="FIVE_MINUTES",n.HalfHourly="HALF_HOURLY",n.Hourly="HOURLY",n.OneMinute="ONE_MINUTE",n.TenSeconds="TEN_SECONDS"}(md||(md={})),function(n){n.Body1="BODY1",n.Body2="BODY2",n.ButtonText="BUTTON_TEXT",n.Callout1="CALLOUT1",n.Callout2="CALLOUT2",n.Callout3="CALLOUT3",n.InputTitle="INPUT_TITLE",n.Small1="SMALL1",n.Small2="SMALL2",n.Small3="SMALL3",n.Tabular="TABULAR",n.Title1="TITLE1",n.Title2="TITLE2",n.Title3="TITLE3",n.Title4="TITLE4",n.Title5="TITLE5",n.Title6="TITLE6"}(ld||(ld={})),function(n){n.EnergyCharges="ENERGY_CHARGES",n.ImportedCharges="IMPORTED_CHARGES",n.ImportedCredits="IMPORTED_CREDITS"}(Td||(Td={})),function(n){n.PostedDateAsc="POSTED_DATE_ASC",n.PostedDateDesc="POSTED_DATE_DESC"}(pd||(pd={})),function(n){n.Electricity="ELECTRICITY",n.Gas="GAS"}(Nd||(Nd={})),function(n){n.High="HIGH",n.Low="LOW",n.Medium="MEDIUM"}(_d||(_d={})),function(n){n.Credit="CREDIT",n.SmartPrepay="SMART_PREPAY",n.TraditionalPrepay="TRADITIONAL_PREPAY"}(Id||(Id={})),function(n){n.AccuracyTest="ACCURACY_TEST",n.BracketInstallation="BRACKET_INSTALLATION",n.Commission="COMMISSION",n.CommsHubPowerCycle="COMMS_HUB_POWER_CYCLE",n.CommsHubReplacement="COMMS_HUB_REPLACEMENT",n.ConfirmMeterDetails="CONFIRM_METER_DETAILS",n.DeEnergise="DE_ENERGISE",n.Energise="ENERGISE",n.Exchange="EXCHANGE",n.IhdInstall="IHD_INSTALL",n.InvestigateFault="INVESTIGATE_FAULT",n.IsolatorSwitchInstall="ISOLATOR_SWITCH_INSTALL",n.MeterTailsUpgrade="METER_TAILS_UPGRADE",n.Move="MOVE",n.NewConnection="NEW_CONNECTION",n.Reinstall="REINSTALL",n.Remove="REMOVE",n.ReplaceSeals="REPLACE_SEALS"}(Od||(Od={}));var yd=Object(Rd.d)(a||(a=Object(Sd.a)(["\n    fragment MeterSelectorElectricityMeterFields on ElectricityMeterType {\n  __typename\n  activeTo\n  id\n  registers {\n    id\n    name\n  }\n  serialNumber\n}\n    "]))),bd=Object(Rd.d)(i||(i=Object(Sd.a)(["\n    fragment MeterSelectorElectricityMeterPointFields on ElectricityMeterPointType {\n  __typename\n  id\n  meters(includeInactive: $showInactive) {\n    ...MeterSelectorElectricityMeterFields\n  }\n}\n    ",""])),yd),Dd=Object(Rd.d)(r||(r=Object(Sd.a)(["\n    fragment MeterSelectorGasMeterFields on GasMeterType {\n  __typename\n  activeTo\n  id\n  registers {\n    id\n    name\n  }\n  serialNumber\n}\n    "]))),Pd=Object(Rd.d)(o||(o=Object(Sd.a)(["\n    fragment MeterSelectorGasMeterPointFields on GasMeterPointType {\n  __typename\n  id\n  meters(includeInactive: $showInactive) {\n    ...MeterSelectorGasMeterFields\n  }\n}\n    ",""])),Dd),Md=Object(Rd.d)(d||(d=Object(Sd.a)(["\n    fragment MeterSelectorPropertyFields on PropertyType {\n  __typename\n  electricityMeterPoints {\n    ...MeterSelectorElectricityMeterPointFields\n  }\n  gasMeterPoints {\n    ...MeterSelectorGasMeterPointFields\n  }\n  id\n  postcode\n}\n    ","\n",""])),bd,Pd),Ld=Object(Rd.d)(c||(c=Object(Sd.a)(["\n    fragment ElectricityMeterRegisterExpanded on ElectricityMeterRegisterType {\n  digits\n  expectedReadingRanges\n  identifier\n}\n    "]))),Ud=Object(Rd.d)(s||(s=Object(Sd.a)(["\n    fragment GasMeterRegisterExpanded on GasMeterRegisterType {\n  digits\n  expectedReadingRanges\n  identifier\n}\n    "]))),Fd=Object(Rd.d)(u||(u=Object(Sd.a)(["\n    fragment AccountMetersActiveToElectricityMeterFields on ElectricityMeterType {\n  activeTo\n  id\n}\n    "]))),vd=Object(Rd.d)(E||(E=Object(Sd.a)(["\n    fragment AccountMetersActiveToGasMeterFields on GasMeterType {\n  activeTo\n  id\n}\n    "]))),$d=Object(Rd.d)(m||(m=Object(Sd.a)(["\n    fragment EnergyProductFields on EnergyProductType {\n  availableFrom\n  availableTo\n  code\n  description\n  displayName\n  fullName\n  id\n  isBusiness\n  isGreen\n  isHidden\n  isPrepay\n  isVariable\n  tariffsDirectDebit: tariffs(\n    paymentMethod: $paymentMethodDirectDebit\n    postcode: $postcode\n  ) {\n    edges {\n      node {\n        __typename\n        ... on TariffType {\n          displayName\n          id\n          standingCharge\n        }\n        ... on StandardTariff {\n          displayName\n          id\n          unitRate\n        }\n        ... on DayNightTariff {\n          dayRate\n          displayName\n          id\n          nightRate\n        }\n        ... on GasTariffType {\n          displayName\n          id\n          unitRate\n        }\n      }\n    }\n  }\n  tariffsNonDirectDebit: tariffs(\n    paymentMethod: $paymentMethodNonDirectDebit\n    postcode: $postcode\n  ) {\n    edges {\n      node {\n        __typename\n        ... on TariffType {\n          displayName\n          id\n          standingCharge\n        }\n        ... on StandardTariff {\n          displayName\n          id\n          unitRate\n        }\n        ... on DayNightTariff {\n          dayRate\n          displayName\n          id\n          nightRate\n        }\n        ... on GasTariffType {\n          displayName\n          id\n          unitRate\n        }\n      }\n    }\n  }\n}\n    "]))),jd=Object(Rd.d)(l||(l=Object(Sd.a)(["\n    fragment AccountDetailElectricityAgreementFields on ElectricityAgreementType {\n  id\n  tariff {\n    ... on TariffType {\n      displayName\n      id\n      productCode\n    }\n  }\n  validFrom\n  validTo\n}\n    "]))),hd=Object(Rd.d)(T||(T=Object(Sd.a)(["\n    fragment AccountDetailElectricityMeterPointFields on ElectricityMeterPointType {\n  agreements {\n    ...AccountDetailElectricityAgreementFields\n  }\n  id\n  meters(includeInactive: false) {\n    id\n    meterType\n  }\n}\n    ",""])),jd),Gd=Object(Rd.d)(p||(p=Object(Sd.a)(["\n    fragment AccountDetailGasAgreementFields on GasAgreementType {\n  id\n  tariff {\n    displayName\n    id\n    productCode\n  }\n  validFrom\n  validTo\n}\n    "]))),Bd=Object(Rd.d)(N||(N=Object(Sd.a)(["\n    fragment AccountDetailGasMeterPointFields on GasMeterPointType {\n  agreements {\n    ...AccountDetailGasAgreementFields\n  }\n  id\n  meters(includeInactive: false) {\n    id\n    mechanism\n  }\n}\n    ",""])),Gd),Hd=Object(Rd.d)(_||(_=Object(Sd.a)(["\n    fragment AccountDetailPropertyFields on PropertyType {\n  address\n  electricityMeterPoints {\n    ...AccountDetailElectricityMeterPointFields\n  }\n  gasMeterPoints {\n    ...AccountDetailGasMeterPointFields\n  }\n  id\n}\n    ","\n",""])),hd,Bd),qd=Object(Rd.d)(I||(I=Object(Sd.a)(["\n    fragment AccountDetailAccountFields on AccountType {\n  balance\n  id\n  number\n}\n    "]))),Vd=Object(Rd.d)(O||(O=Object(Sd.a)(["\n    fragment AccountsModalAccountFields on AccountInterface {\n  ...AccountDetailAccountFields\n}\n    ",""])),qd),wd=(Object(Rd.d)(S||(S=Object(Sd.a)(["\n    fragment AccountSwitchPanelAccountFields on AccountInterface {\n  ...AccountsModalAccountFields\n}\n    ",""])),Vd),Object(Rd.d)(R||(R=Object(Sd.a)(["\n    fragment ChooseQuotedProductFields on QuotedProductType {\n  annualAmount\n  co2SavingInKg\n  description\n  electricityTariffInformationLabel {\n    ... on TariffInformationLabelStandard {\n      additionals\n      assumedAnnualConsumption\n      estimatedAnnualCost\n      exitFees\n      paymentMethod\n      priceGuaranteedUntil\n      standingCharge\n      supplier\n      tariffComparisonRate\n      tariffEndsOn\n      tariffName\n      tariffType\n      unitRate\n    }\n    ... on TariffInformationLabelEco7 {\n      additionals\n      assumedAnnualConsumptionDay\n      assumedAnnualConsumptionNight\n      estimatedAnnualCost\n      exitFees\n      paymentMethod\n      priceGuaranteedUntil\n      standingCharge\n      supplier\n      tariffComparisonRate\n      tariffEndsOn\n      tariffName\n      tariffType\n      unitRateDay\n      unitRateNight\n    }\n    ... on TariffInformationLabelThreeRate {\n      additionals\n      assumedAnnualConsumptionDay\n      assumedAnnualConsumptionNight\n      assumedAnnualConsumptionOffPeak\n      estimatedAnnualCost\n      exitFees\n      paymentMethod\n      priceGuaranteedUntil\n      standingCharge\n      supplier\n      tariffComparisonRate\n      tariffEndsOn\n      tariffName\n      tariffType\n      unitRateDay\n      unitRateNight\n      unitRateOffPeak\n    }\n  }\n  gasTariffInformationLabel {\n    additionals\n    assumedAnnualConsumption\n    estimatedAnnualCost\n    exitFees\n    paymentMethod\n    priceGuaranteedUntil\n    standingCharge\n    supplier\n    tariffComparisonRate\n    tariffEndsOn\n    tariffName\n    tariffType\n    unitRate\n  }\n  id\n  includesCarbonOffsetting\n  isVariable\n  monthlyAmount\n  name\n  product {\n    code\n    isPrepay\n  }\n  treesSaving\n}\n    "])))),kd=(Object(Rd.d)(A||(A=Object(Sd.a)(["\n    fragment CurrentTariffsCardElectricityTariffFields on ElectricityTariffType {\n  __typename\n  ... on TariffType {\n    displayName\n    fullName\n    id\n    standingCharge\n  }\n  ... on StandardTariff {\n    id\n    unitRate\n  }\n  ... on DayNightTariff {\n    dayRate\n    id\n    nightRate\n  }\n}\n    "]))),Object(Rd.d)(f||(f=Object(Sd.a)(["\n    fragment CurrentTariffsCardGasTariffFields on GasTariffType {\n  displayName\n  fullName\n  standingCharge\n  unitRate\n}\n    "]))),Object(Rd.d)(C||(C=Object(Sd.a)(["\n    fragment MeterReadingsHistoryTableElectricityMeterReadingConnectionTypeEdge on ElectricityMeterReadingConnectionTypeEdge {\n  node {\n    id\n    readAt\n    readingSource\n    registers {\n      name\n      value\n    }\n    source\n  }\n}\n    "])))),Yd=Object(Rd.d)(g||(g=Object(Sd.a)(["\n    fragment MeterReadingsHistoryTableGasMeterReadingConnectionTypeEdge on GasMeterReadingConnectionTypeEdge {\n  node {\n    id\n    readAt\n    readingSource\n    registers {\n      name\n      value\n    }\n    source\n  }\n}\n    "]))),Wd=Object(Rd.d)(y||(y=Object(Sd.a)(["\n    fragment TariffRenewalPropertyListElectricityAgreement on ElectricityAgreementType {\n  id\n  tariff {\n    ... on TariffType {\n      displayName\n      id\n      productCode\n    }\n  }\n  validFrom\n  validTo\n}\n    "]))),xd=Object(Rd.d)(b||(b=Object(Sd.a)(["\n    fragment TariffRenewalPropertyListElectricityMeterPoint on ElectricityMeterPointType {\n  agreements {\n    ...TariffRenewalPropertyListElectricityAgreement\n  }\n  id\n}\n    ",""])),Wd),Kd=Object(Rd.d)(D||(D=Object(Sd.a)(["\n    fragment TariffRenewalPropertyListGasAgreement on GasAgreementType {\n  id\n  tariff {\n    displayName\n    id\n    productCode\n  }\n  validFrom\n  validTo\n}\n    "]))),Qd=Object(Rd.d)(P||(P=Object(Sd.a)(["\n    fragment TariffRenewalPropertyListGasMeterPoint on GasMeterPointType {\n  agreements {\n    ...TariffRenewalPropertyListGasAgreement\n  }\n  id\n}\n    ",""])),Kd),Xd=Object(Rd.d)(M||(M=Object(Sd.a)(["\n    fragment TariffRenewalPropertyListProperty on PropertyType {\n  electricityMeterPoints {\n    ...TariffRenewalPropertyListElectricityMeterPoint\n  }\n  gasMeterPoints {\n    ...TariffRenewalPropertyListGasMeterPoint\n  }\n  id\n  postcode\n  splitAddress\n}\n    ","\n",""])),xd,Qd),Jd=Object(Rd.d)(L||(L=Object(Sd.a)(["\n    fragment TariffRenewalModalAccount on AccountType {\n  id\n  number\n}\n    "]))),zd=Object(Rd.d)(U||(U=Object(Sd.a)(["\n    fragment CampaignForFeatureFlags on AccountCampaignType {\n  slug\n  name\n  startDate\n  expiryDate\n}\n    "]))),Zd=Object(Rd.d)(F||(F=Object(Sd.a)(["\n    fragment CreateEstimatedQuoteFields on CreateQuoteOutputType {\n  errors {\n    errors {\n      ... on SerializerErrorType {\n        code\n        message\n      }\n      ... on SerializerFieldErrorsType {\n        errors {\n          ... on SerializerErrorType {\n            code\n            message\n          }\n          ... on SerializerFieldErrorsType {\n            errors {\n              ... on SerializerErrorType {\n                code\n                message\n              }\n            }\n            field\n          }\n        }\n        field\n      }\n    }\n    field\n  }\n  quote {\n    code\n    quotedProducts {\n      description\n      electricityTariffInformationLabel {\n        ... on TariffInformationLabelStandard {\n          exitFees\n          paymentMethod\n          tariffType\n        }\n        ... on TariffInformationLabelEco7 {\n          exitFees\n          paymentMethod\n          tariffType\n        }\n        ... on TariffInformationLabelThreeRate {\n          exitFees\n          paymentMethod\n          tariffType\n        }\n      }\n      gasTariffInformationLabel {\n        exitFees\n        paymentMethod\n      }\n      id\n      isVariable\n      monthlyAmount\n      name\n      product {\n        code\n      }\n    }\n  }\n}\n    "]))),nc=Object(Rd.d)(v||(v=Object(Sd.a)(["\n    fragment ActiveAppointment on ActiveAppointmentType {\n  status\n  date\n  timeSlotEnd\n  timeSlotStart\n  appointmentDate\n  agent\n  workCategory\n  id\n  agentReference\n}\n    "]))),ec=Object(Rd.d)($||($=Object(Sd.a)(["\n    fragment propertyInfo on PropertyType {\n  address\n  splitAddress\n  postcode\n  id\n  __typename\n}\n    "]))),tc=Object(Rd.d)(j||(j=Object(Sd.a)(["\n    fragment FitMeterFields on FitMeterType {\n  id\n  maxExpectedRead\n  mpan\n  readings(last: 1) {\n    edges {\n      node {\n        isBiennial\n        readAt\n        value\n      }\n    }\n  }\n  serialNumber\n  type\n}\n    "]))),ac=(Object(Rd.d)(h||(h=Object(Sd.a)(["\n    fragment InstallationFields on InstallationType {\n  fitId\n  meters {\n    ...FitMeterFields\n  }\n}\n    ",""])),tc),Object(Rd.d)(G||(G=Object(Sd.a)(["\n    fragment ProductHasChangeFee on EnergyProductType {\n  id\n  description\n  exitFees\n}\n    "]))));Object(Rd.d)(B||(B=Object(Sd.a)(["\n    query accountPayments($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    paymentSchedules(first: 10) {\n      edges {\n        node {\n          id\n          isVariablePaymentAmount\n          isPaymentHoliday\n          paymentAmount\n          paymentDay\n          reason\n          validFrom\n          validTo\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(H||(H=Object(Sd.a)(["\n    query fitRepayments($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    ledgers {\n      id\n      ledgerType\n      transactions(first: 100) {\n        edges {\n          node {\n            __typename\n            amount\n            createdAt\n            id\n            isIssued\n          }\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(q||(q=Object(Sd.a)(["\n    query getLoggedInUserBreadcrumbs {\n  viewer {\n    accounts {\n      ... on AccountType {\n        id\n        number\n      }\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(V||(V=Object(Sd.a)(["\n    query getAccountMeterSelector($accountNumber: String!, $showInactive: Boolean!) {\n  properties(accountNumber: $accountNumber) {\n    ...MeterSelectorPropertyFields\n  }\n}\n    ",""])),Md);Object(Rd.d)(w||(w=Object(Sd.a)(["\n    query propertiesSelectAccount($accountNumber: String!, $active: Boolean) {\n  properties(accountNumber: $accountNumber, active: $active) {\n    address\n    electricityMeterPoints {\n      __typename\n      id\n    }\n    gasMeterPoints {\n      __typename\n      id\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(k||(k=Object(Sd.a)(["\n    query smartPaygAccountSetupPanel($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    applications(first: 1) {\n      edges {\n        node {\n          isMigrated\n        }\n      }\n    }\n    id\n    properties {\n      electricityMeterPoints {\n        id\n        targetSsd\n      }\n      gasMeterPoints {\n        id\n        targetSsd\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(Y||(Y=Object(Sd.a)(["\n    query GetBill($accountNumber: String!, $billId: ID!, $billType: BillTypeEnum!) {\n  account(accountNumber: $accountNumber) {\n    bill(billType: $billType, id: $billId) {\n      temporaryUrl\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(W||(W=Object(Sd.a)(["\n    query getAccountWithPropertiesAndBalance($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    __typename\n    accountType\n    balance\n    id\n    properties {\n      __typename\n      electricityMeterPoints {\n        __typename\n        id\n        meters {\n          __typename\n          meterType\n        }\n        smartStartDate\n      }\n      gasMeterPoints {\n        __typename\n        id\n        meters {\n          __typename\n          mechanism\n        }\n        smartStartDate\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(x||(x=Object(Sd.a)(["\n    query getAccountDetails($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    applications(first: 1) {\n      edges {\n        node {\n          isMigrated\n          migrationSource\n        }\n      }\n    }\n    balance\n    directDebitInstructions(first: 1, statuses: [ACTIVE]) {\n      edges {\n        node {\n          id\n        }\n      }\n      pageInfo {\n        startCursor\n      }\n    }\n    firstDirectDebitInstruction: directDebitInstructions(first: 1) {\n      edges {\n        node {\n          id\n          status\n        }\n      }\n    }\n    id\n    paymentSchedules(first: 10) {\n      edges {\n        node {\n          id\n          scheduleType\n          validFrom\n          validTo\n        }\n      }\n    }\n    properties {\n      electricityMeterPoints {\n        id\n        targetSsd\n      }\n      gasMeterPoints {\n        id\n        targetSsd\n      }\n      id\n    }\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n}\n    "])));Object(Rd.d)(K||(K=Object(Sd.a)(["\n    query getBalanceHistory($accountNumber: String!, $cursor: String) {\n  account(accountNumber: $accountNumber) {\n    id\n    transactions(after: $cursor, first: 10) {\n      edges {\n        cursor\n        node {\n          amount\n          balanceCarriedForward\n          id\n          isAccountCharge\n          isAccountPayment\n          isCredit\n          isHeld\n          isReversed\n          postedDate\n          title\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Q||(Q=Object(Sd.a)(["\n    query GetBills($accountNumber: String!, $cursor: String) {\n  account(accountNumber: $accountNumber) {\n    bills(after: $cursor, first: 12) {\n      edges {\n        node {\n          billType\n          fromDate\n          id\n          temporaryUrl\n          issuedDate\n          ... on StatementType {\n            closingBalance\n            status\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(X||(X=Object(Sd.a)(["\n    query getPendingPayments($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    payments(first: 5, status: PENDING) {\n      edges {\n        node {\n          amount\n          id\n          paymentDate\n          status\n        }\n      }\n    }\n    provisionalTransactions(first: 5) {\n      edges {\n        node {\n          amount\n          date\n          id\n          title\n        }\n      }\n    }\n    repayments(first: 5, statuses: [APPROVED, REQUESTED]) {\n      edges {\n        node {\n          amount\n          id\n          paymentDate\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(J||(J=Object(Sd.a)(["\n    query accountOverviewBase($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    applications(first: 1) {\n      edges {\n        node {\n          migrationSource\n        }\n      }\n    }\n    campaigns {\n      campaignExpiryDate\n      expiryDate\n      name\n      slug\n      startDate\n    }\n    properties {\n      id\n      electricityMeterPoints {\n        agreements {\n          id\n          validTo\n          validFrom\n          tariff {\n            ... on TariffType {\n              __typename\n              id\n              displayName\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n        }\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          validTo\n          validFrom\n          tariff {\n            id\n            displayName\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n        }\n      }\n    }\n    accountType\n    commsDeliveryPreference\n    id\n    status\n    activeReferralSchemes {\n      domestic {\n        referrerRewardAmount\n      }\n    }\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n  metadata(identifier: $accountNumber, linkedObjectType: ACCOUNT) {\n    key\n    value\n  }\n  viewer {\n    preferences {\n      isOptedInToOfferMessages\n    }\n  }\n}\n    "])));Object(Rd.d)(z||(z=Object(Sd.a)(["\n    mutation updateCommsDeliveryPreference($updateCommsDeliveryPreference: UpdateCommsDeliveryPreferenceInput!) {\n  updateCommsDeliveryPreference(input: $updateCommsDeliveryPreference) {\n    account {\n      commsDeliveryPreference\n    }\n  }\n}\n    "])));Object(Rd.d)(Z||(Z=Object(Sd.a)(["\n    query accountOverviewHeader($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    applications(first: 1) {\n      edges {\n        node {\n          migrationSource\n        }\n      }\n    }\n    id\n    properties {\n      address\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n        }\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n        }\n      }\n      id\n    }\n  }\n  viewer {\n    accounts {\n      ... on AccountType {\n        balance\n        number\n        id\n        properties {\n          id\n          address\n        }\n      }\n    }\n    id\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n}\n    "])));Object(Rd.d)(nn||(nn=Object(Sd.a)(["\n    query getAccountOverview($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    campaigns {\n      startDate\n      slug\n      name\n      expiryDate\n      campaignExpiryDate\n    }\n    applications(first: 1) {\n      edges {\n        node {\n          isMigrated\n          migrationSource\n          salesSubchannel\n        }\n      }\n    }\n    balance\n    id\n    number\n    properties {\n      electricityMeterPoints {\n        __typename\n        agreements {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              id\n              productCode\n              displayName\n            }\n          }\n          validFrom\n          validTo\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n        }\n        mpan\n        smartStartDate\n        targetSsd\n      }\n      gasMeterPoints {\n        __typename\n        agreements {\n          id\n          tariff {\n            __typename\n            id\n            productCode\n          }\n          validFrom\n          validTo\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n        }\n        mprn\n        smartStartDate\n        targetSsd\n      }\n      id\n    }\n    status\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n  viewer {\n    email\n    id\n  }\n}\n    "])));Object(Rd.d)(en||(en=Object(Sd.a)(["\n    query accountOverviewSmartBanner($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    electricityAgreements {\n      id\n      tariff {\n        __typename\n        ... on TariffType {\n          id\n          productCode\n        }\n      }\n      validFrom\n      validTo\n    }\n    gasAgreements {\n      id\n      tariff {\n        __typename\n        ... on TariffType {\n          id\n          productCode\n        }\n      }\n      validFrom\n      validTo\n    }\n    id\n    properties {\n      electricityMeterPoints {\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          meterType\n        }\n        smartStartDate\n      }\n      gasMeterPoints {\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          mechanism\n        }\n        smartStartDate\n      }\n      id\n    }\n    smets2Interest\n  }\n}\n    "])));Object(Rd.d)(tn||(tn=Object(Sd.a)(["\n    query dashboardAccountSelector($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    applications(first: 1) {\n      edges {\n        node {\n          migrationSource\n        }\n      }\n    }\n    id\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n}\n    "])));Object(Rd.d)(an||(an=Object(Sd.a)(["\n    query accountSummary($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    balance\n    directDebitInstructions(first: 1, statuses: [ACTIVE]) {\n      pageInfo {\n        startCursor\n      }\n    }\n    id\n    paymentSchedules(first: 10) {\n      edges {\n        node {\n          id\n          isPaymentHoliday\n          scheduleType\n          validFrom\n          validTo\n          paymentAmount\n          paymentDay\n          isVariablePaymentAmount\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(rn||(rn=Object(Sd.a)(["\n    query futureTariffs($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      address\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              displayName\n              id\n            }\n          }\n          validFrom\n          validTo\n        }\n        enrolment {\n          status\n        }\n        id\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            __typename\n            displayName\n            id\n          }\n          validFrom\n          validTo\n        }\n        enrolment {\n          status\n        }\n        id\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(on||(on=Object(Sd.a)(["\n    query meterReadingStatuses($accountNumber: String!, $includeExpandedRegister: Boolean!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      address\n      electricityMeterPoints {\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          registers {\n            id\n            name\n            ...ElectricityMeterRegisterExpanded @include(if: $includeExpandedRegister)\n          }\n          serialNumber\n        }\n        mpan\n      }\n      gasMeterPoints {\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          registers {\n            id\n            name\n            ...GasMeterRegisterExpanded @include(if: $includeExpandedRegister)\n          }\n          serialNumber\n        }\n        mprn\n      }\n      id\n    }\n  }\n}\n    ","\n",""])),Ld,Ud);Object(Rd.d)(dn||(dn=Object(Sd.a)(["\n    query myBills($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    applications(first: 1) {\n      edges {\n        node {\n          isMigrated\n          migrationSource\n        }\n      }\n    }\n    balance\n    directDebitInstructions(first: 1, statuses: [ACTIVE]) {\n      edges {\n        node {\n          id\n        }\n      }\n      pageInfo {\n        startCursor\n      }\n    }\n    firstDirectDebitInstruction: directDebitInstructions(first: 1) {\n      edges {\n        node {\n          id\n          status\n        }\n      }\n    }\n    id\n    paymentSchedules(first: 10) {\n      edges {\n        node {\n          id\n          scheduleType\n          validFrom\n          validTo\n        }\n      }\n    }\n    properties {\n      electricityMeterPoints {\n        id\n        targetSsd\n      }\n      gasMeterPoints {\n        id\n        targetSsd\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(cn||(cn=Object(Sd.a)(["\n    query smartMeterCommunicationBannerAccount($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      electricityMeterPoints {\n        id\n        meters(includeInactive: false) {\n          id\n          meterPoint {\n            id\n            smartStartDate\n          }\n          meterType\n        }\n      }\n      gasMeterPoints {\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n          meterPoint {\n            id\n            smartStartDate\n          }\n        }\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(sn||(sn=Object(Sd.a)(["\n    query propertyCards($propertyId: ID!) {\n  property(id: $propertyId) {\n    electricityMeterPoints {\n      agreements {\n        id\n        tariff {\n          __typename\n          ... on TariffType {\n            displayName\n            id\n            preVatStandingCharge\n            productCode\n            standingCharge\n          }\n          ... on StandardTariff {\n            preVatUnitRate\n            unitRate\n          }\n          ... on PrepayTariff {\n            preVatUnitRate\n            unitRate\n          }\n          ... on DayNightTariff {\n            dayRate\n            nightRate\n            preVatDayRate\n            preVatNightRate\n          }\n          ... on HalfHourlyTariff {\n            unitRates {\n              validFrom\n              validTo\n              value\n            }\n          }\n          ... on ThreeRateTariff {\n            dayRate\n            nightRate\n            offPeakRate\n            preVatDayRate\n            preVatNightRate\n            preVatOffPeakRate\n          }\n        }\n        validFrom\n        validTo\n      }\n      enrolment {\n        status\n        supplyStartDate\n      }\n      id\n      meters(includeInactive: false) {\n        __typename\n        id\n      }\n      mpan\n      smartStartDate\n    }\n    gasMeterPoints {\n      agreements {\n        id\n        tariff {\n          displayName\n          id\n          preVatStandingCharge\n          preVatUnitRate\n          productCode\n          standingCharge\n          unitRate\n        }\n        validFrom\n        validTo\n      }\n      enrolment {\n        status\n        supplyStartDate\n      }\n      id\n      meters(includeInactive: false) {\n        __typename\n        id\n      }\n      mprn\n      smartStartDate\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(un||(un=Object(Sd.a)(["\n    query tariffs($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      address\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              displayName\n              id\n              preVatStandingCharge\n              productCode\n              standingCharge\n            }\n            ... on StandardTariff {\n              preVatUnitRate\n              unitRate\n            }\n            ... on PrepayTariff {\n              preVatUnitRate\n              unitRate\n            }\n            ... on DayNightTariff {\n              dayRate\n              nightRate\n              preVatDayRate\n              preVatNightRate\n            }\n            ... on HalfHourlyTariff {\n              unitRates {\n                validFrom\n                validTo\n                value\n              }\n            }\n            ... on ThreeRateTariff {\n              dayRate\n              nightRate\n              offPeakRate\n              preVatDayRate\n              preVatNightRate\n              preVatOffPeakRate\n            }\n          }\n          unitRateUplifts {\n            unitRateUplift\n            validFrom\n            validTo\n          }\n          validFrom\n          validTo\n        }\n        enrolment {\n          status\n          supplyStartDate\n          switchStartDate\n        }\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          meterPoint {\n            targetSsd\n          }\n        }\n        mpan\n        smartStartDate\n      }\n      gasMeterPoints {\n        __typename\n        agreements {\n          id\n          tariff {\n            displayName\n            id\n            preVatStandingCharge\n            preVatUnitRate\n            productCode\n            standingCharge\n            unitRate\n          }\n          unitRateUplifts {\n            unitRateUplift\n            validFrom\n            validTo\n          }\n          validFrom\n          validTo\n        }\n        enrolment {\n          status\n          supplyStartDate\n          switchStartDate\n        }\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n        }\n        mprn\n        smartStartDate\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(En||(En=Object(Sd.a)(["\n    query getWarmHomeDiscountApplication($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    warmHomeDiscount {\n      applications(first: 1) {\n        edges {\n          __typename\n          node {\n            qualifyingComponent\n            qualifyingCriteria\n            status\n            taxYear\n            updatedAt\n          }\n        }\n      }\n      records(first: 1) {\n        edges {\n          __typename\n          node {\n            taxYear\n          }\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(mn||(mn=Object(Sd.a)(["\n    query warmHomeDiscountApply($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    eligibilityForWarmHomeDiscount {\n      isEligible\n    }\n    id\n    properties {\n      electricityMeterPoints {\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n        }\n      }\n      id\n    }\n    warmHomeDiscount {\n      applications(first: 1) {\n        edges {\n          node {\n            status\n            taxYear\n          }\n        }\n      }\n      records(first: 1) {\n        edges {\n          node {\n            taxYear\n          }\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(ln||(ln=Object(Sd.a)(["\n    query evBannerEligibilityCheck($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    canRenewTariff\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              __typename\n              id\n              productCode\n            }\n          }\n          validFrom\n          validTo\n        }\n        enrolment {\n          status\n        }\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          meterType\n          registers {\n            __typename\n            id\n          }\n        }\n        mpan\n        smartStartDate\n        supplyEndDate\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          mechanism\n          registers {\n            __typename\n            id\n          }\n        }\n        smartStartDate\n        supplyEndDate\n      }\n      id\n    }\n    directDebitInstructions(first: 1, statuses: [ACTIVE, PROVISIONAL]) {\n      edges {\n        node {\n          id\n        }\n      }\n      pageInfo {\n        startCursor\n      }\n    }\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n  viewer {\n    id\n    preferredName\n  }\n}\n    "])));Object(Rd.d)(Tn||(Tn=Object(Sd.a)(["\n    query getLoggedInUser($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    applications(first: 1) {\n      edges {\n        node {\n          migrationSource\n        }\n      }\n    }\n    id\n  }\n  metadata(identifier: $accountNumber, linkedObjectType: ACCOUNT) {\n    key\n    value\n  }\n  viewer {\n    email\n    id\n    preferredName\n  }\n}\n    "])));Object(Rd.d)(pn||(pn=Object(Sd.a)(["\n    query getUserMetadata($email: String!) {\n  metadata(identifier: $email, linkedObjectType: ACCOUNT_USER) {\n    key\n    value\n  }\n}\n    "])));Object(Rd.d)(Nn||(Nn=Object(Sd.a)(["\n    mutation masqueradeAuthentication($masqueradeToken: String!, $userId: String!) {\n  masqueradeAuthentication(masqueradeToken: $masqueradeToken, userId: $userId) {\n    errors {\n      field\n      messages\n    }\n    token\n  }\n}\n    "])));Object(Rd.d)(_n||(_n=Object(Sd.a)(["\n    query getAccountEvents($accountNumber: String!, $cursor: String) {\n  account(accountNumber: $accountNumber) {\n    events(after: $cursor, eventTypes: [EMAIL_SENT], first: 10) {\n      edges {\n        cursor\n        node {\n          ... on EmailEventType {\n            eventType\n            id\n            message {\n              attachments {\n                filename\n                id\n                temporaryUrl\n              }\n              id\n              recipient\n              sentAt\n              subject\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(In||(In=Object(Sd.a)(["\n    query getEmailEvent($id: ID!) {\n  node(id: $id) {\n    id\n    ... on EmailEventType {\n      message {\n        attachments {\n          filename\n          id\n          temporaryUrl\n        }\n        htmlBody\n        id\n        recipient\n        sentAt\n        subject\n        textBody\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(On||(On=Object(Sd.a)(["\n    mutation createElectricityMeterReading($mpxn: String!, $readAt: Date!, $readings: [ReadingInputType]!, $serialNumber: String!) {\n  createElectricityMeterReading(\n    mpan: $mpxn\n    readAt: $readAt\n    readings: $readings\n    serialNumber: $serialNumber\n  ) {\n    id\n    readingErrors {\n      errors {\n        ... on SerializerErrorType {\n          code\n          message\n        }\n        ... on SerializerFieldErrorsType {\n          errors {\n            ... on SerializerErrorType {\n              code\n              message\n            }\n            ... on SerializerFieldErrorsType {\n              errors {\n                ... on SerializerErrorType {\n                  code\n                  message\n                }\n              }\n              field\n            }\n          }\n          field\n        }\n      }\n      field\n    }\n  }\n}\n    "])));Object(Rd.d)(Sn||(Sn=Object(Sd.a)(["\n    mutation createGasMeterReading($mpxn: String!, $readAt: Date!, $reading: Int!, $serialNumber: String!) {\n  createGasMeterReading(\n    mprn: $mpxn\n    readAt: $readAt\n    reading: $reading\n    serialNumber: $serialNumber\n  ) {\n    id\n    readingErrors {\n      errors {\n        ... on SerializerErrorType {\n          code\n          message\n        }\n        ... on SerializerFieldErrorsType {\n          errors {\n            ... on SerializerErrorType {\n              code\n              message\n            }\n            ... on SerializerFieldErrorsType {\n              errors {\n                ... on SerializerErrorType {\n                  code\n                  message\n                }\n              }\n              field\n            }\n          }\n          field\n        }\n      }\n      field\n    }\n  }\n}\n    "])));Object(Rd.d)(Rn||(Rn=Object(Sd.a)(["\n    query getElecMeterPoints($id: ID!, $meterId: Int) {\n  property(id: $id) {\n    address\n    electricityMeterPoints {\n      id\n      meters(id: $meterId) {\n        id\n        readings(first: 1) {\n          edges {\n            node {\n              readAt\n              registers {\n                digits\n                identifier\n                name\n                value\n              }\n            }\n          }\n        }\n        registers {\n          digits\n          expectedReadingRanges\n          id\n          identifier\n          name\n        }\n        serialNumber\n      }\n      mpan\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(An||(An=Object(Sd.a)(["\n    query getGasMeterPoints($id: ID!, $meterId: Int) {\n  property(id: $id) {\n    address\n    gasMeterPoints {\n      id\n      meters(id: $meterId) {\n        id\n        readings(first: 1) {\n          edges {\n            node {\n              readAt\n              registers {\n                digits\n                identifier\n                name\n                value\n              }\n            }\n          }\n        }\n        registers {\n          digits\n          expectedReadingRanges\n          id\n          identifier\n          name\n        }\n        serialNumber\n      }\n      mprn\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(fn||(fn=Object(Sd.a)(["\n    query getLastElecReading($id: ID!) {\n  property(id: $id) {\n    electricityMeterPoints {\n      id\n      meters(includeInactive: false) {\n        id\n        readings(first: 1) {\n          edges {\n            node {\n              id\n              readAt\n            }\n          }\n        }\n      }\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(Cn||(Cn=Object(Sd.a)(["\n    query getLastGasReading($id: ID!) {\n  property(id: $id) {\n    gasMeterPoints {\n      id\n      meters(includeInactive: false) {\n        id\n        readings(first: 1) {\n          edges {\n            node {\n              readAt\n            }\n          }\n        }\n      }\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(gn||(gn=Object(Sd.a)(["\n    query meterReadsRedirectPage($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      electricityMeterPoints {\n        id\n        meters(includeInactive: false) {\n          id\n        }\n      }\n      gasMeterPoints {\n        id\n        meters(includeInactive: false) {\n          id\n        }\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(yn||(yn=Object(Sd.a)(["\n    query getAccountMetersActiveTo($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      electricityMeterPoints {\n        id\n        meters(includeInactive: true) {\n          ...AccountMetersActiveToElectricityMeterFields\n        }\n      }\n      gasMeterPoints {\n        id\n        meters(includeInactive: true) {\n          ...AccountMetersActiveToGasMeterFields\n        }\n      }\n      id\n    }\n  }\n}\n    ","\n",""])),Fd,vd);Object(Rd.d)(bn||(bn=Object(Sd.a)(["\n    mutation createDirectDebitInstruction($input: CreateDirectDebitInstructionInput!) {\n  createDirectDebitInstruction(input: $input) {\n    directDebitInstruction {\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(Dn||(Dn=Object(Sd.a)(["\n    mutation directDebitPaymentAmountUpdate($input: UpdatePaymentSchedulePaymentAmountInput!) {\n  updatePaymentSchedulePaymentAmount(input: $input) {\n    paymentSchedule {\n      paymentAmount\n    }\n  }\n}\n    "])));Object(Rd.d)(Pn||(Pn=Object(Sd.a)(["\n    mutation directDebitPaymentDayUpdate($input: UpdatePaymentSchedulePaymentDayInput!) {\n  updatePaymentSchedulePaymentDay(input: $input) {\n    paymentSchedule {\n      id\n      paymentDay\n    }\n  }\n}\n    "])));Object(Rd.d)(Mn||(Mn=Object(Sd.a)(["\n    query getCurrentDirectDebitDetails($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    paymentSchedules(first: 1) {\n      edges {\n        node {\n          id\n          paymentAmount\n          paymentDay\n          validFrom\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Ln||(Ln=Object(Sd.a)(["\n    query getCurrentPaymentAmount($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    balance\n    id\n    paymentAdequacy {\n      suggestedDirectDebitAmount\n    }\n    paymentSchedules(first: 3) {\n      edges {\n        node {\n          id\n          isVariablePaymentAmount\n          paymentAmount\n          paymentDay\n          reason\n          validFrom\n          validTo\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Un||(Un=Object(Sd.a)(["\n    query getCurrentPaymentDay($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    paymentSchedules(first: 1) {\n      edges {\n        node {\n          id\n          paymentDay\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Fn||(Fn=Object(Sd.a)(["\n    query getPaymentDetails($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    directDebitInstructions(first: 1) {\n      edges {\n        node {\n          accountHolder\n          id\n          maskedAccountIdentifier\n        }\n      }\n    }\n    id\n    paymentSchedules(first: 10) {\n      edges {\n        node {\n          id\n          isVariablePaymentAmount\n          paymentAmount\n          paymentDay\n          reason\n          validFrom\n          validTo\n        }\n      }\n    }\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n}\n    "])));Object(Rd.d)(vn||(vn=Object(Sd.a)(["\n    query getContactDetails {\n  viewer {\n    email\n    firstName\n    id\n    landline\n    lastName\n    mobile\n  }\n}\n    "])));Object(Rd.d)($n||($n=Object(Sd.a)(["\n    mutation setContactDetails($email: String, $familyName: String, $givenName: String, $landline: String, $mobile: String) {\n  updateUser(\n    input: {givenName: $givenName, familyName: $familyName, mobile: $mobile, landline: $landline, email: $email}\n  ) {\n    viewer {\n      email\n      familyName\n      givenName\n      landline\n      mobile\n    }\n  }\n}\n    "])));Object(Rd.d)(jn||(jn=Object(Sd.a)(["\n    query getPriorityServicesRecord {\n  viewer {\n    id\n    specialCircumstances {\n      records {\n        ... on SpecialCircumstanceRecordType {\n          id\n          summary\n        }\n        ... on TemporarySpecialCircumstanceRecordType {\n          expiryDate\n          id\n          summary\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(hn||(hn=Object(Sd.a)(["\n    query personalInfoHomePageMetadata($email: String!) {\n  metadata(identifier: $email, linkedObjectType: ACCOUNT_USER) {\n    key\n    value\n  }\n}\n    "])));Object(Rd.d)(Gn||(Gn=Object(Sd.a)(["\n    query personalInfoHomePageViewer {\n  viewer {\n    email\n    fullName\n    id\n    landline\n    mobile\n    preferences {\n      emailFormat\n      fontSizeMultiplier\n      isOptedInMeterReadingConfirmations\n      isOptedInToClientMessages\n      isOptedInToOfferMessages\n      isOptedInToRecommendedMessages\n      isOptedInToSmsMessages\n      isOptedInToThirdPartyMessages\n      isOptedInToUpdateMessages\n      isUsingInvertedEmailColours\n      preferredHoldMusic\n    }\n  }\n}\n    "])));Object(Rd.d)(Bn||(Bn=Object(Sd.a)(["\n    query smartCommunicationsGetAccount($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    smets2Interest\n    smets2RefusalReason\n  }\n}\n    "])));Object(Rd.d)(Hn||(Hn=Object(Sd.a)(["\n    mutation smartCommunicationsUpdate($accountNumber: String!, $interest: SmartMeterInterestChoices!, $refusalReason: SMETS2InterestReason) {\n  smets2Interest(\n    input: {accountNumber: $accountNumber, smets2Interest: $interest, smets2RefusalReason: $refusalReason}\n  ) {\n    interestUpdated\n  }\n}\n    "])));Object(Rd.d)(qn||(qn=Object(Sd.a)(["\n    query smartPreferencesGetAccount($accountNumber: String!) {\n  smartMeterDataPreferences(accountNumber: $accountNumber) {\n    readingFrequency\n    readingsAnalysisConsentProvided\n  }\n}\n    "])));Object(Rd.d)(Vn||(Vn=Object(Sd.a)(["\n    mutation smartPreferencesUpdate($accountNumber: String!, $analysisConsentProvided: Boolean, $readingFrequency: SmartMeterReadingFrequencyChoices!) {\n  updateSmartMeterDataPreferences(\n    input: {accountNumber: $accountNumber, readingFrequency: $readingFrequency, allowReadingsAnalysis: $analysisConsentProvided}\n  ) {\n    smartMeterDataPreferences {\n      readingFrequency\n      readingsAnalysisConsentProvided\n    }\n  }\n}\n    "])));Object(Rd.d)(wn||(wn=Object(Sd.a)(["\n    query referralHistoryTable($accountNumber: String!, $cursor: String) {\n  account(accountNumber: $accountNumber) {\n    id\n    number\n    referrals(after: $cursor, first: 10) {\n      edges {\n        node {\n          id\n          paymentDate\n          paymentStatus\n          referredUserJoinDate\n          referredUserName\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(kn||(kn=Object(Sd.a)(["\n    query referralsCard($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    activeReferralSchemes {\n      domestic {\n        code\n        referralDisplayUrl\n        referralUrl\n        referrerRewardAmount\n      }\n    }\n    id\n    number\n  }\n}\n    "])));Object(Rd.d)(Yn||(Yn=Object(Sd.a)(["\n    query referralsPage($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    id\n    number\n  }\n}\n    "])));Object(Rd.d)(Wn||(Wn=Object(Sd.a)(["\n    mutation resetPassword($password: String!, $token: String!, $userId: String!) {\n  resetPassword(input: {password: $password, userId: $userId, token: $token}) {\n    errors {\n      ... on SerializerFieldErrorsType {\n        errors {\n          ... on SerializerErrorType {\n            code\n            message\n          }\n        }\n        field\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(xn||(xn=Object(Sd.a)(["\n    query getUserAccounts {\n  viewer {\n    accounts {\n      ... on AccountType {\n        accountType\n        applications(first: 1) {\n          edges {\n            node {\n              isMigrated\n              migrationSource\n            }\n          }\n        }\n        balance\n        canRenewTariff\n        id\n        number\n        properties {\n          id\n          address\n        }\n      }\n    }\n    email\n    id\n  }\n}\n    "])));Object(Rd.d)(Kn||(Kn=Object(Sd.a)(["\n    query smartPaygPaymentsPageAccount($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n        }\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n        }\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(Qn||(Qn=Object(Sd.a)(["\n    query smartPaygPaymentsPageElectricityPrepayLedgers($accountNumber: String!, $mpan: String!, $serialNumber: String!) {\n  electricityPrepayLedgers(\n    accountNumber: $accountNumber\n    mpan: $mpan\n    serialNumber: $serialNumber\n  ) {\n    creditLedger {\n      currentBalance\n      id\n    }\n    paymentLedger {\n      creditTransfers {\n        createdDate\n        id\n        netAmount\n        utrn\n      }\n      id\n      payments {\n        amount\n        id\n        paymentDate\n        utrn\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Xn||(Xn=Object(Sd.a)(["\n    query smartPaygPaymentsPageGasPrepayLedgers($accountNumber: String!, $mprn: String!, $serialNumber: String!) {\n  gasPrepayLedgers(\n    accountNumber: $accountNumber\n    mprn: $mprn\n    serialNumber: $serialNumber\n  ) {\n    creditLedger {\n      currentBalance\n      id\n    }\n    paymentLedger {\n      creditTransfers {\n        createdDate\n        id\n        netAmount\n        utrn\n      }\n      id\n      payments {\n        amount\n        id\n        paymentDate\n        utrn\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Jn||(Jn=Object(Sd.a)(["\n    mutation smartPaygTopUpCardObtainPan($input: SmartMeterDeviceInput!) {\n  generatePaymentAllocationNumber(input: $input) {\n    pan\n  }\n}\n    "])));Object(Rd.d)(zn||(zn=Object(Sd.a)(["\n    query smartPaygTopUpCardPageAccount($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n          smartDevices {\n            deviceId\n            id\n          }\n        }\n        targetSsd\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n          smartDevices {\n            deviceId\n            id\n          }\n        }\n        targetSsd\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(Zn||(Zn=Object(Sd.a)(["\n    query getAccountPropertiesMeters($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    id\n    properties {\n      address\n      electricityMeterPoints {\n        __typename\n        agreements {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              displayName\n              fullName\n              id\n              productCode\n            }\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      gasMeterPoints {\n        __typename\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              displayName\n              fullName\n              id\n              productCode\n            }\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(ne||(ne=Object(Sd.a)(["\n    mutation requote($input: RequoteInput!) {\n  requote(input: $input) {\n    quote {\n      code\n      elecAnnualConsumptionDay\n      elecAnnualConsumptionNight\n      elecAnnualConsumptionStandard\n      elecEstimate\n      gasAnnualConsumption\n      gasEstimate\n      gspGroupId\n      meterType\n      partnerProductId\n      postcode\n      quotedProducts {\n        ...ChooseQuotedProductFields\n      }\n    }\n  }\n}\n    ",""])),wd);Object(Rd.d)(ee||(ee=Object(Sd.a)(["\n    query getAccountPaymentSchedules($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    canRenewTariff\n    id\n    paymentSchedules(first: 5) {\n      edges {\n        node {\n          id\n          paymentAdequacyAdjustment\n          paymentAdequacyAdjustmentExpiryDate\n          paymentAmount\n          paymentDay\n          totalDebtAmount\n        }\n      }\n    }\n    properties {\n      electricityMeterPoints {\n        __typename\n        agreements {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              displayName\n              fullName\n              id\n              standingCharge\n            }\n            ... on StandardTariff {\n              id\n              unitRate\n            }\n            ... on DayNightTariff {\n              dayRate\n              id\n              nightRate\n            }\n          }\n          validFrom\n          validTo\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          registers {\n            id\n          }\n        }\n      }\n      gasMeterPoints {\n        __typename\n        agreements {\n          id\n          tariff {\n            displayName\n            fullName\n            id\n            standingCharge\n            unitRate\n          }\n          validFrom\n          validTo\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          registers {\n            id\n          }\n        }\n      }\n      id\n    }\n  }\n  viewer {\n    givenName\n    id\n  }\n}\n    "])));Object(Rd.d)(te||(te=Object(Sd.a)(["\n    mutation RenewAgreement($input: RenewAgreementsInput!) {\n  renewAgreements(input: $input) {\n    account {\n      ... on AccountType {\n        id\n        paymentSchedules(first: 3) {\n          edges {\n            node {\n              paymentAdequacyAdjustment\n              paymentAdequacyAdjustmentExpiryDate\n              paymentAmount\n              totalDebtAmount\n              validFrom\n              validTo\n            }\n          }\n        }\n        properties {\n          electricityMeterPoints {\n            __typename\n            agreements {\n              id\n              tariff {\n                __typename\n                ... on TariffType {\n                  displayName\n                  id\n                  standingCharge\n                }\n                ... on StandardTariff {\n                  id\n                  unitRate\n                }\n                ... on DayNightTariff {\n                  dayRate\n                  id\n                  nightRate\n                }\n              }\n              validTo\n            }\n            id\n          }\n          gasMeterPoints {\n            __typename\n            agreements {\n              id\n              tariff {\n                displayName\n                id\n                standingCharge\n                unitRate\n              }\n              validTo\n            }\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(ae||(ae=Object(Sd.a)(["\n    query GetQuote($code: String, $productId: String) {\n  quote(code: $code) {\n    quotedProducts(id: $productId) {\n      __typename\n      allowedSupplyStartDates\n      electricityTariffInformationLabel {\n        __typename\n        ... on TariffInformationLabelStandard {\n          additionals\n          annualStandingCharge\n          assumedAnnualConsumption\n          estimatedAnnualCost\n          exitFees\n          paymentMethod\n          priceGuaranteedUntil\n          standingCharge\n          supplier\n          tariffCode\n          tariffComparisonRate\n          tariffEndsOn\n          tariffName\n          tariffType\n          unitRate\n        }\n        ... on TariffInformationLabelEco7 {\n          additionals\n          assumedAnnualConsumptionDay\n          assumedAnnualConsumptionNight\n          estimatedAnnualCost\n          exitFees\n          paymentMethod\n          priceGuaranteedUntil\n          standingCharge\n          supplier\n          tariffCode\n          tariffComparisonRate\n          tariffEndsOn\n          tariffName\n          tariffType\n          unitRateDay\n          unitRateNight\n        }\n      }\n      gasTariffInformationLabel {\n        __typename\n        additionals\n        annualStandingCharge\n        assumedAnnualConsumption\n        estimatedAnnualCost\n        exitFees\n        paymentMethod\n        priceGuaranteedUntil\n        standingCharge\n        supplier\n        tariffCode\n        tariffComparisonRate\n        tariffEndsOn\n        tariffName\n        tariffType\n        unitRate\n      }\n      id\n      monthlyAmount\n      name\n      product {\n        __typename\n        code\n      }\n    }\n    termsAndConditions {\n      __typename\n      html\n      pdfUrl\n    }\n  }\n  viewer {\n    email\n    id\n  }\n}\n    "])));Object(Rd.d)(ie||(ie=Object(Sd.a)(["\n    query getAccountTariffRenewalSuccess($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    paymentSchedules(first: 1) {\n      edges {\n        node {\n          id\n          isVariablePaymentAmount\n          paymentAmount\n          validFrom\n        }\n      }\n    }\n    properties {\n      address\n      electricityMeterPoints {\n        __typename\n        agreements(includeInactive: true) {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              displayName\n              fullName\n              id\n            }\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      gasMeterPoints {\n        agreements(includeInactive: true) {\n          id\n          tariff {\n            displayName\n            fullName\n            id\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(re||(re=Object(Sd.a)(["\n    mutation UpdatePassword($input: UpdatePasswordInput!) {\n  updatePassword(input: $input) {\n    viewer {\n      email\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(oe||(oe=Object(Sd.a)(["\n    mutation createWarmHomeDiscountApplication($accountNumber: String!, $applicationInputs: WarmHomeDiscountApplicationInputType!) {\n  createWarmHomeDiscountApplication(\n    accountNumber: $accountNumber\n    applicationInputs: $applicationInputs\n  ) {\n    errors {\n      errors {\n        ... on SerializerErrorType {\n          message\n        }\n      }\n      field\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(de||(de=Object(Sd.a)(["\n    query getAccountType($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    id\n  }\n}\n    "])));Object(Rd.d)(ce||(ce=Object(Sd.a)(["\n    mutation obtainKrakenToken($input: ObtainJSONWebTokenInput!) {\n  obtainKrakenToken(input: $input) {\n    payload\n    refreshExpiresIn\n    token\n  }\n}\n    "])));var ic=Object(Rd.d)(se||(se=Object(Sd.a)(["\n    query energyProducts($availability: EnergyProductAvailability, $brand: String!, $cursor: String!, $filterBy: [EnergyProductFilters], $paymentMethodDirectDebit: PaymentMethodChoices!, $paymentMethodNonDirectDebit: PaymentMethodChoices!, $postcode: String!) {\n  energyProducts(\n    after: $cursor\n    availability: $availability\n    brand: $brand\n    filterBy: $filterBy\n    first: 30\n    postcode: $postcode\n  ) {\n    edges {\n      cursor\n      node {\n        ...EnergyProductFields\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    ",""])),$d);function rc(n){var e=Object.assign({},gd,n);return fd.a(ic,e)}Object(Rd.d)(ue||(ue=Object(Sd.a)(["\n    query billieTabFaqsEnergyProduct($code: String!) {\n  energyProduct(code: $code) {\n    id\n    isFixed\n    code\n  }\n}\n    "])));Object(Rd.d)(Ee||(Ee=Object(Sd.a)(["\n    query billieTabFaqs($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    balance\n    properties {\n      id\n      electricityMeterPoints {\n        id\n        agreements {\n          id\n          validTo\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        meters {\n          __typename\n          id\n          meterType\n        }\n        smartStartDate\n      }\n      gasMeterPoints {\n        id\n        agreements {\n          id\n          validTo\n          tariff {\n            ... on GasTariffType {\n              id\n              productCode\n            }\n          }\n        }\n        meters {\n          __typename\n          id\n          mechanism\n        }\n        smartStartDate\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(me||(me=Object(Sd.a)(["\n    query billieTabSummary($accountNumber: String!) {\n  viewer {\n    preferredName\n    familyName\n    title\n    givenName\n  }\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      id\n      electricityMeterPoints {\n        id\n        agreements {\n          __typename\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              displayName\n              id\n              preVatStandingCharge\n            }\n            ... on StandardTariff {\n              preVatUnitRate\n            }\n          }\n          validFrom\n          validTo\n        }\n      }\n      gasMeterPoints {\n        id\n        agreements {\n          __typename\n          id\n          tariff {\n            displayName\n            id\n            preVatStandingCharge\n            preVatUnitRate\n          }\n          validFrom\n          validTo\n        }\n      }\n    }\n    bills(first: 100) {\n      edges {\n        node {\n          id\n          issuedDate\n          ... on StatementType {\n            closingBalance\n            transactions {\n              edges {\n                node {\n                  id\n                  amount\n                  title\n                  postedDate\n                  ... on Charge {\n                    consumption {\n                      startDate\n                      endDate\n                      quantity\n                      unit\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(le||(le=Object(Sd.a)(["\n    query billieEligible($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    accountType\n    campaigns {\n      expiryDate\n      name\n      slug\n      startDate\n    }\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              __typename\n              id\n              productCode\n            }\n          }\n          validFrom\n          validTo\n        }\n        enrolment {\n          status\n        }\n        id\n        profileClass\n        meters(includeInactive: false) {\n          __typename\n          id\n          meterType\n          registers {\n            __typename\n            id\n          }\n        }\n        mpan\n        smartStartDate\n        supplyEndDate\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          mechanism\n          registers {\n            __typename\n            id\n          }\n        }\n        smartStartDate\n        supplyEndDate\n      }\n      id\n    }\n    bills(first: 100) {\n      edges {\n        node {\n          id\n          issuedDate\n          ... on StatementType {\n            transactions {\n              edges {\n                __typename\n                node {\n                  id\n                  title\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Te||(Te=Object(Sd.a)(["\n    query getActivePaymentSchedule($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    paymentSchedules(active: true, first: 1) {\n      edges {\n        node {\n          id\n          isVariablePaymentAmount\n        }\n      }\n    }\n  }\n}\n    "])));var oc=Object(Rd.d)(pe||(pe=Object(Sd.a)(["\n    query achEligibilityCheck($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    canRenewTariff\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              __typename\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          meterType\n          registers {\n            __typename\n            id\n          }\n        }\n        mpan\n        smartStartDate\n        supplyEndDate\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          mechanism\n          registers {\n            __typename\n            id\n          }\n        }\n        smartStartDate\n        supplyEndDate\n      }\n      id\n    }\n    directDebitInstructions(first: 1, statuses: [ACTIVE, PROVISIONAL]) {\n      edges {\n        node {\n          id\n        }\n      }\n      pageInfo {\n        startCursor\n      }\n    }\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n  viewer {\n    id\n    preferredName\n  }\n}\n    "])));function dc(n){var e=Object.assign({},gd,n);return Ad.b(oc,e)}var cc=Object(Rd.d)(Ne||(Ne=Object(Sd.a)(["\n    query meterReadingsDue($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      electricityMeterPoints {\n        id\n        meters {\n          readings(first: 100) {\n            edges {\n              node {\n                id\n                readAt\n                source\n              }\n            }\n          }\n          id\n          meterType\n          fuelType\n        }\n        smartStartDate\n      }\n      gasMeterPoints {\n        id\n        meters {\n          id\n          readings(first: 100) {\n            edges {\n              node {\n                id\n                readAt\n                source\n              }\n            }\n          }\n          mechanism\n          fuelType\n        }\n        smartStartDate\n      }\n      id\n    }\n  }\n}\n    "])));function sc(n){var e=Object.assign({},gd,n);return fd.a(cc,e)}var uc=Object(Rd.d)(_e||(_e=Object(Sd.a)(["\n    query getPaymentAdequacy($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    paymentAdequacy {\n      suggestedDirectDebitAmount\n    }\n    paymentSchedules(first: 5) {\n      edges {\n        node {\n          id\n          paymentAmount\n          scheduleType\n        }\n      }\n    }\n    directDebitInstructions(first: 1, statuses: [ACTIVE, PROVISIONAL]) {\n      edges {\n        node {\n          id\n        }\n      }\n      pageInfo {\n        startCursor\n      }\n    }\n  }\n}\n    "])));function Ec(n){var e=Object.assign({},gd,n);return fd.a(uc,e)}var mc=Object(Rd.d)(Ie||(Ie=Object(Sd.a)(["\n    query recentPayments($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    payments(first: 10) {\n      edges {\n        node {\n          amount\n          paymentDate\n          status\n          transactionType\n        }\n      }\n    }\n    directDebitInstructions(first: 1, statuses: [ACTIVE, PROVISIONAL]) {\n      edges {\n        node {\n          id\n        }\n      }\n      pageInfo {\n        startCursor\n      }\n    }\n  }\n}\n    "])));function lc(n){var e=Object.assign({},gd,n);return fd.a(mc,e)}var Tc=Object(Rd.d)(Oe||(Oe=Object(Sd.a)(["\n    query acSmartMeter($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      electricityMeterPoints {\n        id\n        meters(includeInactive: false) {\n          id\n          meterPoint {\n            id\n            smartStartDate\n          }\n          meterType\n          readings(first: 100) {\n            edges {\n              node {\n                id\n                readAt\n                source\n              }\n            }\n          }\n        }\n      }\n      gasMeterPoints {\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n          meterPoint {\n            id\n            smartStartDate\n          }\n          readings(first: 100) {\n            edges {\n              node {\n                id\n                readAt\n                source\n              }\n            }\n          }\n        }\n      }\n      id\n    }\n  }\n}\n    "])));function pc(n){var e=Object.assign({},gd,n);return fd.a(Tc,e)}var Nc=Object(Rd.d)(Se||(Se=Object(Sd.a)(["\n    query acTariffRenewal($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    canRenewTariff\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              id\n              productCode\n              displayName\n            }\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n            displayName\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      id\n    }\n  }\n}\n    "])));function _c(n){var e=Object.assign({},gd,n);return fd.a(Nc,e)}var Ic=Object(Rd.d)(Re||(Re=Object(Sd.a)(["\n    query accountDetail($accountNumber: String!, $active: Boolean) {\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n  properties(accountNumber: $accountNumber, active: $active) {\n    ...AccountDetailPropertyFields\n  }\n}\n    ",""])),Hd);function Oc(n){var e=Object.assign({},gd,n);return Ad.b(Ic,e)}var Sc=Object(Rd.d)(Ae||(Ae=Object(Sd.a)(["\n    query accountSelector {\n  viewer {\n    accounts {\n      ... on AccountType {\n        balance\n        number\n        id\n        properties {\n          id\n          address\n        }\n      }\n    }\n    id\n  }\n}\n    "])));function Rc(n){var e=Object.assign({},gd,n);return Ad.b(Sc,e)}var Ac=Object(Rd.d)(fe||(fe=Object(Sd.a)(["\n    query accountSwitchPanel($accountNumber: String!, $active: Boolean) {\n  properties(accountNumber: $accountNumber, active: $active) {\n    id\n  }\n}\n    "])));function fc(n){var e=Object.assign({},gd,n);return Ad.b(Ac,e)}var Cc=Object(Rd.d)(Ce||(Ce=Object(Sd.a)(["\n    query addressLookupFieldsAddresses($postcode: String!) {\n  addresses(postcode: $postcode) {\n    edges {\n      node {\n        addressKey\n        display\n        electricityMeterPoints {\n          mpan\n          profileClass\n        }\n        gasMeterPoints {\n          mprn\n        }\n        gspGroupId\n        hasPrepaidMeters\n        houseNumber\n        line1\n        line2\n        line3\n        line4\n        line5\n        postcode\n        streetName\n      }\n    }\n  }\n}\n    "])));function gc(n){var e=Object.assign({},gd,n);return fd.a(Cc,e)}var yc=Object(Rd.d)(ge||(ge=Object(Sd.a)(["\n    query stripeBannersAccount($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    accountType\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              displayName\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n        }\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            displayName\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n        }\n      }\n      id\n    }\n  }\n  viewer {\n    preferences {\n      isOptedInToOfferMessages\n    }\n  }\n}\n    "])));function bc(n){var e=Object.assign({},gd,n);return Ad.b(yc,e)}Object(Rd.d)(ye||(ye=Object(Sd.a)(["\n    query currentTariffsProperty($propertyId: ID!) {\n  property(id: $propertyId) {\n    address\n    electricityMeterPoints {\n      agreements {\n        id\n        tariff {\n          ... on TariffType {\n            displayName\n            id\n            standingCharge\n          }\n          ... on StandardTariff {\n            unitRate\n          }\n          ... on DayNightTariff {\n            dayRate\n            nightRate\n          }\n        }\n        validFrom\n        validTo\n      }\n    }\n    gasMeterPoints {\n      agreements {\n        id\n        tariff {\n          displayName\n          id\n          standingCharge\n          unitRate\n        }\n        validFrom\n        validTo\n      }\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(be||(be=Object(Sd.a)(["\n    query directDebitBankDetailsValidateBankAccount($bankAccountNumber: String!, $sortCode: String!) {\n  validateBankAccount(accountNumber: $bankAccountNumber, sortCode: $sortCode) {\n    bankName\n    branch\n  }\n}\n    "])));Object(Rd.d)(De||(De=Object(Sd.a)(["\n    query editCommsPreferencesForm($email: String!) {\n  metadata(identifier: $email, linkedObjectType: ACCOUNT_USER) {\n    key\n    value\n  }\n  viewer {\n    id\n    preferences {\n      emailFormat\n      fontSizeMultiplier\n      isOptedInMeterReadingConfirmations\n      isOptedInToClientMessages\n      isOptedInToOfferMessages\n      isOptedInToRecommendedMessages\n      isOptedInToSmsMessages\n      isOptedInToThirdPartyMessages\n      isOptedInToUpdateMessages\n      isUsingInvertedEmailColours\n      preferredHoldMusic\n    }\n  }\n}\n    "])));Object(Rd.d)(Pe||(Pe=Object(Sd.a)(["\n    mutation updateCommsPreferencesForm($inputCommsPreferences: UpdateAccountUserCommsPreferencesMutationInput!, $inputMetadata: MetadataInput!) {\n  updateCommsPreferences(input: $inputCommsPreferences) {\n    commsPreferences {\n      emailFormat\n      fontSizeMultiplier\n      isOptedInMeterReadingConfirmations\n      isOptedInToClientMessages\n      isOptedInToOfferMessages\n      isOptedInToRecommendedMessages\n      isOptedInToSmsMessages\n      isOptedInToThirdPartyMessages\n      isOptedInToUpdateMessages\n      isUsingInvertedEmailColours\n      preferredHoldMusic\n    }\n  }\n  updateMetadata(input: $inputMetadata) {\n    metadata {\n      key\n      value\n    }\n  }\n}\n    "])));var Dc=Object(Rd.d)(Me||(Me=Object(Sd.a)(['\n    query averageUnitRate($code: String!) {\n  energyProduct(code: $code) {\n    fullName\n    tariffs(postcode: "EC1M 6PB") {\n      edges {\n        node {\n          ... on StandardTariff {\n            displayName\n            preVatUnitRate\n            unitRate\n          }\n        }\n      }\n    }\n  }\n}\n    '])));function Pc(n){var e=Object.assign({},gd,n);return Ad.b(Dc,e)}Object(Rd.d)(Le||(Le=Object(Sd.a)(["\n    query getFeedbackBetaAccountPreferredName {\n  viewer {\n    id\n    preferredName\n  }\n}\n    "])));Object(Rd.d)(Ue||(Ue=Object(Sd.a)(["\n    query feedbackStripe($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    campaigns {\n      expiryDate\n      name\n      slug\n      startDate\n    }\n  }\n}\n    "])));var Mc=Object(Rd.d)(Fe||(Fe=Object(Sd.a)(["\n    query globalNotificationsAccount($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    applications(first: 1) {\n      edges {\n        node {\n          migrationSource\n        }\n      }\n    }\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n        }\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n        }\n      }\n      id\n    }\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n  viewer {\n    preferences {\n      isOptedInToOfferMessages\n    }\n  }\n}\n    "])));function Lc(n){var e=Object.assign({},gd,n);return Ad.b(Mc,e)}Object(Rd.d)(ve||(ve=Object(Sd.a)(['\n    mutation homemoveFeedbackUpdateMetadata($accountNumber: String!, $reason: JSONString!) {\n  updateMetadata(\n    input: {identifier: $accountNumber, linkedObjectType: ACCOUNT, key: "Homemove feedback", value: $reason}\n  ) {\n    metadata {\n      key\n    }\n  }\n}\n    '])));Object(Rd.d)($e||($e=Object(Sd.a)(["\n    mutation createMetadata($input: MetadataInput!) {\n  createMetadata(input: $input) {\n    metadata {\n      key\n      value\n    }\n  }\n}\n    "])));Object(Rd.d)(je||(je=Object(Sd.a)(["\n    query getAccountPreferences {\n  viewer {\n    __typename\n    id\n    preferences {\n      emailFormat\n      fontSizeMultiplier\n      isOptedInMeterReadingConfirmations\n      isOptedInToClientMessages\n      isOptedInToOfferMessages\n      isOptedInToRecommendedMessages\n      isOptedInToSmsMessages\n      isOptedInToThirdPartyMessages\n      isOptedInToUpdateMessages\n      isUsingInvertedEmailColours\n      preferredHoldMusic\n    }\n  }\n}\n    "])));Object(Rd.d)(he||(he=Object(Sd.a)(["\n    query UserTargetSSDDates {\n  viewer {\n    accounts {\n      ... on AccountType {\n        properties {\n          electricityMeterPoints {\n            targetSsd\n          }\n          gasMeterPoints {\n            targetSsd\n          }\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Ge||(Ge=Object(Sd.a)(["\n    query ViewerLoyalty {\n  viewer {\n    accounts {\n      ... on AccountType {\n        electricityAgreements {\n          validFrom\n          validTo\n        }\n        gasAgreements {\n          validFrom\n          validTo\n        }\n        paymentSchedules(active: true, first: 1) {\n          edges {\n            node {\n              scheduleType\n            }\n          }\n        }\n        properties {\n          electricityMeterPoints {\n            meters {\n              meterType\n            }\n            smartStartDate\n          }\n          gasMeterPoints {\n            meters {\n              mechanism\n            }\n            smartStartDate\n          }\n          id\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Be||(Be=Object(Sd.a)(["\n    mutation updateAccountPreferences($inputCommsPreferences: UpdateAccountUserCommsPreferencesMutationInput!) {\n  updateCommsPreferences(input: $inputCommsPreferences) {\n    commsPreferences {\n      emailFormat\n      fontSizeMultiplier\n      isOptedInMeterReadingConfirmations\n      isOptedInToClientMessages\n      isOptedInToOfferMessages\n      isOptedInToRecommendedMessages\n      isOptedInToSmsMessages\n      isOptedInToThirdPartyMessages\n      isOptedInToUpdateMessages\n      isUsingInvertedEmailColours\n      preferredHoldMusic\n    }\n  }\n}\n    "])));Object(Rd.d)(He||(He=Object(Sd.a)(["\n    mutation updateMetadata($input: MetadataInput!) {\n  updateMetadata(input: $input) {\n    metadata {\n      key\n      value\n    }\n  }\n}\n    "])));var Uc=Object(Rd.d)(qe||(qe=Object(Sd.a)(["\n    query getLoggedInAccount($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n        }\n        targetSsd\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n        }\n        targetSsd\n      }\n      id\n    }\n  }\n}\n    "])));function Fc(n){var e=Object.assign({},gd,n);return Ad.b(Uc,e)}Object(Rd.d)(Ve||(Ve=Object(Sd.a)(["\n    query headerGetLoggedInUser {\n  viewer {\n    accounts {\n      ... on AccountType {\n        applications(first: 1) {\n          edges {\n            node {\n              isMigrated\n              migrationSource\n            }\n          }\n        }\n        balance\n        id\n        number\n        properties {\n          id\n          address\n        }\n      }\n    }\n    id\n    preferredName\n  }\n}\n    "])));var vc=Object(Rd.d)(we||(we=Object(Sd.a)(["\n    mutation loginEmailAuthentication($input: ObtainJSONWebTokenInput!) {\n  obtainKrakenToken(input: $input) {\n    payload\n    refreshExpiresIn\n    refreshToken\n    token\n  }\n}\n    "])));function $c(n){var e=Object.assign({},gd,n);return Cd.a(vc,e)}Object(Rd.d)(ke||(ke=Object(Sd.a)(["\n    query meterReadingStatusFirstElecticityReading($accountNumber: String!, $meterId: String!) {\n  customerReadings: electricityMeterReadings(\n    accountNumber: $accountNumber\n    eventTypes: [CUSTOMER]\n    first: 1\n    meterId: $meterId\n  ) {\n    edges {\n      node {\n        readAt\n        registers {\n          name\n          value\n        }\n        source\n      }\n    }\n  }\n  dataCollectorReadings: electricityMeterReadings(\n    accountNumber: $accountNumber\n    eventTypes: [DATA_COLLECTOR]\n    first: 1\n    meterId: $meterId\n  ) {\n    edges {\n      node {\n        readAt\n        registers {\n          name\n          value\n        }\n        source\n      }\n    }\n  }\n  prepayReadings: electricityMeterReadings(\n    accountNumber: $accountNumber\n    eventTypes: [PREPAY]\n    first: 1\n    meterId: $meterId\n  ) {\n    edges {\n      node {\n        readAt\n        registers {\n          name\n          value\n        }\n        source\n      }\n    }\n  }\n  smartReadings: electricityMeterReadings(\n    accountNumber: $accountNumber\n    eventTypes: [SMART_METER]\n    first: 1\n    meterId: $meterId\n  ) {\n    edges {\n      node {\n        readAt\n        registers {\n          name\n          value\n        }\n        source\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Ye||(Ye=Object(Sd.a)(["\n    query meterReadingStatusFirstGasReading($accountNumber: String!, $meterId: String!) {\n  customerReadings: gasMeterReadings(\n    accountNumber: $accountNumber\n    eventTypes: [CUSTOMER]\n    first: 1\n    meterId: $meterId\n  ) {\n    edges {\n      node {\n        readAt\n        registers {\n          name\n          value\n        }\n        source\n      }\n    }\n  }\n  dataCollectorReadings: gasMeterReadings(\n    accountNumber: $accountNumber\n    eventTypes: [DATA_COLLECTOR]\n    first: 1\n    meterId: $meterId\n  ) {\n    edges {\n      node {\n        readAt\n        registers {\n          name\n          value\n        }\n        source\n      }\n    }\n  }\n  prepayReadings: gasMeterReadings(\n    accountNumber: $accountNumber\n    eventTypes: [PREPAY]\n    first: 1\n    meterId: $meterId\n  ) {\n    edges {\n      node {\n        readAt\n        registers {\n          name\n          value\n        }\n        source\n      }\n    }\n  }\n  smartReadings: gasMeterReadings(\n    accountNumber: $accountNumber\n    eventTypes: [SMART_METER]\n    first: 1\n    meterId: $meterId\n  ) {\n    edges {\n      node {\n        readAt\n        registers {\n          name\n          value\n        }\n        source\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(We||(We=Object(Sd.a)(["\n    query meterReadingsHistoryTableElectricityReadings($accountNumber: String!, $cursor: String, $meterId: String!) {\n  readings: electricityMeterReadings(\n    accountNumber: $accountNumber\n    after: $cursor\n    first: 12\n    meterId: $meterId\n  ) {\n    edges {\n      ...MeterReadingsHistoryTableElectricityMeterReadingConnectionTypeEdge\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    ",""])),kd);Object(Rd.d)(xe||(xe=Object(Sd.a)(["\n    query meterReadingsHistoryTableGasReadings($accountNumber: String!, $cursor: String, $meterId: String!) {\n  readings: gasMeterReadings(\n    accountNumber: $accountNumber\n    after: $cursor\n    first: 12\n    meterId: $meterId\n  ) {\n    edges {\n      ...MeterReadingsHistoryTableGasMeterReadingConnectionTypeEdge\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    ",""])),Yd);Object(Rd.d)(Ke||(Ke=Object(Sd.a)(["\n    query referralPanel($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    activeReferralSchemes {\n      domestic {\n        code\n        referredRewardAmount\n      }\n    }\n    id\n  }\n}\n    "])));var jc=Object(Rd.d)(Qe||(Qe=Object(Sd.a)(["\n    mutation requestResetPassword($clientMutationId: String, $email: String!, $isCreateMode: Boolean!) {\n  requestResetPassword(\n    input: {email: $email, isCreateMode: $isCreateMode, clientMutationId: $clientMutationId}\n  ) {\n    clientMutationId\n    errors {\n      field\n      messages\n    }\n  }\n}\n    "])));function hc(n){var e=Object.assign({},gd,n);return Cd.a(jc,e)}Object(Rd.d)(Xe||(Xe=Object(Sd.a)(["\n    query accountCampaigns($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    campaigns {\n      expiryDate\n      name\n      slug\n    }\n    id\n  }\n}\n    "])));var Gc=Object(Rd.d)(Je||(Je=Object(Sd.a)(["\n    query smartBanner($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n        }\n        smartStartDate\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n        }\n        smartStartDate\n      }\n      id\n    }\n    smets2Interest\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n  metadata(identifier: $accountNumber, linkedObjectType: ACCOUNT) {\n    key\n    value\n  }\n}\n    "])));function Bc(n){var e=Object.assign({},gd,n);return fd.a(Gc,e)}var Hc=Object(Rd.d)(ze||(ze=Object(Sd.a)(["\n    query getPropertyIds($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      id\n    }\n  }\n}\n    "])));function qc(n){var e=Object.assign({},gd,n);return fd.a(Hc,e)}var Vc=Object(Rd.d)(Ze||(Ze=Object(Sd.a)(["\n    query smartTroubleshooter($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      electricityMeterPoints {\n        id\n        meters {\n          id\n        }\n        smartStartDate\n      }\n      gasMeterPoints {\n        id\n        meters {\n          id\n        }\n        smartStartDate\n      }\n      id\n    }\n  }\n}\n    "])));function wc(n){var e=Object.assign({},gd,n);return fd.a(Vc,e)}Object(Rd.d)(nt||(nt=Object(Sd.a)(["\n    query getTariffRenewalPropertyList($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      ...TariffRenewalPropertyListProperty\n    }\n  }\n}\n    ",""])),Xd);Object(Rd.d)(et||(et=Object(Sd.a)(["\n    query getTariffRenewalModal {\n  viewer {\n    accounts {\n      ...TariffRenewalModalAccount\n    }\n    id\n  }\n}\n    ",""])),Jd);var kc=Object(Rd.d)(tt||(tt=Object(Sd.a)(["\n    query userContext {\n  viewer {\n    id\n    accounts {\n      ... on AccountType {\n        id\n        number\n        balance\n        properties {\n          id\n          address\n        }\n        campaigns {\n          expiryDate\n          name\n          startDate\n        }\n      }\n    }\n    preferences {\n      isOptedInToOfferMessages\n    }\n    fullName\n    email\n    mobile\n    preferredName\n    givenName\n    familyName\n  }\n}\n    "])));function Yc(n){var e=Object.assign({},gd,n);return fd.a(kc,e)}Object(Rd.d)(at||(at=Object(Sd.a)(["\n    query ddToolData($accountNumber: String!) {\n  livePaymentAdequacy(accountNumber: $accountNumber) {\n    reviewedOn\n    currentBalance\n    targetBalance\n    recommendedPayment {\n      total\n      ongoing\n      adjustment\n    }\n    estimatedConsumption {\n      sourceId\n      sourceName\n      usage\n    }\n  }\n  account(accountNumber: $accountNumber) {\n    id\n    balance\n    paymentAdequacy {\n      suggestedDirectDebitAmount\n    }\n  }\n  viewer {\n    id\n    preferredName\n  }\n}\n    "])));Object(Rd.d)(it||(it=Object(Sd.a)(["\n    query ddToolEligibility($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    accountType\n    properties {\n      id\n      isChangeOfTenancyOngoing\n      electricityMeterPoints {\n        id\n        mpan\n        targetSsd\n        profileClass\n        enrolment {\n          status\n          supplyStartDate\n        }\n        agreements {\n          id\n          validFrom\n          validTo\n          tariff {\n            __typename\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        meters(includeInactive: false) {\n          __typename\n          id\n          meterType\n          registers {\n            __typename\n            id\n          }\n        }\n      }\n      gasMeterPoints {\n        id\n        mprn\n        targetSsd\n        enrolment {\n          status\n          supplyStartDate\n        }\n        agreements {\n          id\n          validFrom\n          validTo\n          tariff {\n            __typename\n            id\n            productCode\n          }\n        }\n        meters(includeInactive: false) {\n          __typename\n          id\n          mechanism\n          registers {\n            __typename\n            id\n          }\n        }\n      }\n    }\n    paymentSchedules(first: 1, active: true, reason: GENERAL_ACCOUNT_PAYMENT) {\n      edges {\n        node {\n          id\n          scheduleType\n          paymentAmount\n          validTo\n          validFrom\n          isPaymentHoliday\n          isVariablePaymentAmount\n        }\n      }\n    }\n    bills(last: 1) {\n      edges {\n        node {\n          id\n          issuedDate\n          ... on StatementType {\n            transactions {\n              edges {\n                __typename\n                node {\n                  __typename\n                  id\n                  title\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    events(eventTypes: [EMAIL_SENT], first: 30) {\n      edges {\n        node {\n          ... on EmailEventType {\n            id\n            message {\n              id\n              sentAt\n              subject\n            }\n          }\n        }\n      }\n    }\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n}\n    "])));var Wc=Object(Rd.d)(rt||(rt=Object(Sd.a)(["\n    query getCampaignsForAccount($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    campaigns {\n      slug\n      ...CampaignForFeatureFlags\n    }\n  }\n}\n    ",""])),zd);function xc(n){var e=Object.assign({},gd,n);return Ad.b(Wc,e)}Object(Rd.d)(ot||(ot=Object(Sd.a)(["\n    mutation createEstimatedQuotes($inputHigh: CreateQuoteInput!, $inputLow: CreateQuoteInput!, $inputMedium: CreateQuoteInput!) {\n  highQuote: createQuote(input: $inputHigh) {\n    ...CreateEstimatedQuoteFields\n  }\n  lowQuote: createQuote(input: $inputLow) {\n    ...CreateEstimatedQuoteFields\n  }\n  mediumQuote: createQuote(input: $inputMedium) {\n    ...CreateEstimatedQuoteFields\n  }\n}\n    ",""])),Zd);var Kc=Object(Rd.d)(dt||(dt=Object(Sd.a)(["\n    mutation refreshToken($input: ObtainJSONWebTokenInput!) {\n  obtainKrakenToken(input: $input) {\n    payload\n    refreshExpiresIn\n    refreshToken\n    token\n  }\n}\n    "])));function Qc(n){var e=Object.assign({},gd,n);return Cd.a(Kc,e)}Object(Rd.d)(ct||(ct=Object(Sd.a)(["\n    query accountCanRefundHook($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    canRequestRefund\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters {\n          __typename\n          id\n          meterType\n        }\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters {\n          __typename\n          id\n        }\n      }\n      id\n    }\n    paymentSchedules(first: 10) {\n      edges {\n        node {\n          id\n          isVariablePaymentAmount\n          paymentAmount\n          paymentDay\n          reason\n          validFrom\n          validTo\n          isPaymentHoliday\n        }\n      }\n    }\n  }\n  livePaymentAdequacy(accountNumber: $accountNumber) {\n    recommendedPayment {\n      total\n    }\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n}\n    "])));Object(Rd.d)(st||(st=Object(Sd.a)(["\n    query accountNumbersBySmartStatusHookGetAccounts {\n  viewer {\n    accounts {\n      ... on AccountType {\n        id\n        number\n      }\n    }\n    id\n  }\n}\n    "])));var Xc=Object(Rd.d)(ut||(ut=Object(Sd.a)(["\n    query getAccountTypeHook($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    id\n  }\n}\n    "])));function Jc(n){var e=Object.assign({},gd,n);return Ad.b(Xc,e)}Object(Rd.d)(Et||(Et=Object(Sd.a)(["\n    query canSetupDirectDebitHook($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    applications(first: 1) {\n      edges {\n        node {\n          isMigrated\n        }\n      }\n    }\n    directDebitInstructions(first: 1, statuses: [ACTIVE, PROVISIONAL]) {\n      edges {\n        node {\n          id\n        }\n      }\n      pageInfo {\n        startCursor\n      }\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(mt||(mt=Object(Sd.a)(["\n    query isBusinessCustomer($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    id\n  }\n}\n    "])));var zc=Object(Rd.d)(lt||(lt=Object(Sd.a)(["\n    query isEligibleForTariffRenewalHook($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    applications(first: 1) {\n      edges {\n        node {\n          migrationSource\n        }\n      }\n    }\n    canRenewTariff\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      id\n    }\n  }\n  activeCampaignOffers(accountNumber: $accountNumber) {\n    expiryDate\n    slug\n  }\n}\n    "])));function Zc(n){var e=Object.assign({},gd,n);return Ad.b(zc,e)}var ns=Object(Rd.d)(Tt||(Tt=Object(Sd.a)(["\n    query getPaymentTypeHook($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    directDebitInstructions(first: 1) {\n      edges {\n        node {\n          id\n          status\n        }\n      }\n      pageInfo {\n        startCursor\n      }\n    }\n    id\n    paymentSchedules(first: 10) {\n      edges {\n        node {\n          id\n          isVariablePaymentAmount\n          scheduleType\n          validFrom\n          validTo\n        }\n      }\n    }\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      id\n    }\n  }\n}\n    "])));function es(n){var e=Object.assign({},gd,n);return Ad.b(ns,e)}function ts(n){var e=Object.assign({},gd,n);return fd.a(ns,e)}Object(Rd.d)(pt||(pt=Object(Sd.a)(["\n    query balanceForDevice($deviceId: String!) {\n  prepayBalanceSnapshot(deviceId: $deviceId) {\n    asAt\n    creditInPence\n    debtInPence\n  }\n}\n    "])));Object(Rd.d)(Nt||(Nt=Object(Sd.a)(["\n    query smartDevicesForAccount($account: String!) {\n  account(accountNumber: $account) {\n    properties {\n      electricityMeterPoints {\n        mpan\n        targetSsd\n        meters {\n          smartDevices {\n            deviceId\n          }\n        }\n      }\n      gasMeterPoints {\n        mprn\n        targetSsd\n        meters {\n          smartDevices {\n            deviceId\n          }\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(_t||(_t=Object(Sd.a)(["\n    query smartPaygLedgersHookMockElectricity($accountNumber: String!, $mpan: String!, $serialNumber: String!) {\n  electricityPrepayLedgers(\n    accountNumber: $accountNumber\n    mpan: $mpan\n    serialNumber: $serialNumber\n  ) {\n    creditLedger {\n      currentBalance\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(It||(It=Object(Sd.a)(["\n    query smartPaygLedgersHookMockGas($accountNumber: String!, $mprn: String!, $serialNumber: String!) {\n  gasPrepayLedgers(\n    accountNumber: $accountNumber\n    mprn: $mprn\n    serialNumber: $serialNumber\n  ) {\n    creditLedger {\n      currentBalance\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(Ot||(Ot=Object(Sd.a)(["\n    query smartPaygLedgersHookAccount($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n          serialNumber\n        }\n        mpan\n        targetSsd\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n          serialNumber\n        }\n        mprn\n        targetSsd\n      }\n      id\n    }\n  }\n}\n    "])));var as=Object(Rd.d)(St||(St=Object(Sd.a)(["\n    query GetOptimizelyAttributeUserData($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    balance\n    directDebitInstructions(first: 1, statuses: [ACTIVE]) {\n      edges {\n        node {\n          id\n          status\n        }\n      }\n    }\n    id\n    properties {\n      __typename\n      electricityMeterPoints {\n        __typename\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters {\n          __typename\n          id\n          meterType\n        }\n        smartStartDate\n      }\n      gasMeterPoints {\n        __typename\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters {\n          __typename\n          id\n          mechanism\n        }\n        smartStartDate\n      }\n      id\n    }\n  }\n}\n    "])));function is(n){var e=Object.assign({},gd,n);return Ad.b(as,e)}Object(Rd.d)(Rt||(Rt=Object(Sd.a)(["\n    mutation smartBookingCancellation($input: CancelSiteworksAppointmentInput!) {\n  cancelSiteworksAppointment(input: $input) {\n    siteworksAppointment {\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(At||(At=Object(Sd.a)(["\n    query smartBookingInstallationDetails1($accountNumber: String!) {\n  siteworksBookingAccountSearchByNumber(accountNumber: $accountNumber) {\n    status\n    siteworksRequests {\n      appointments {\n        ...ActiveAppointment\n      }\n    }\n  }\n}\n    ",""])),nc);Object(Rd.d)(ft||(ft=Object(Sd.a)(["\n    query propertiesInfo($accountNumber: String!) {\n  properties(accountNumber: $accountNumber) {\n    ...propertyInfo\n  }\n}\n    ",""])),ec);Object(Rd.d)(Ct||(Ct=Object(Sd.a)(["\n    mutation worldPayPaymentHookCreatePaymentIntent($input: CreatePaymentIntentInput!) {\n  createPaymentIntent(input: $input) {\n    paymentIntent {\n      amount\n      reference\n    }\n  }\n}\n    "])));var rs=Object(Rd.d)(gt||(gt=Object(Sd.a)(['\n    mutation BoilerAcceptQuote($postAcceptQuoteInput: BoilerAcceptQuoteInput) {\n  boilerAcceptQuote(input: $postAcceptQuoteInput) @rest(type: "BoilerAcceptQuote", path: "/quote", method: "POST", bodyKey: "input") {\n    postcode\n  }\n}\n    '])));function os(n){var e=Object.assign({},gd,n);return Cd.a(rs,e)}var ds=Object(Rd.d)(yt||(yt=Object(Sd.a)(['\n    mutation BoilerAppointmentBooking($postBookingInput: BoilerAppointmentBookingInput) {\n  boilerAppointmentBooking(input: $postBookingInput) @rest(type: "BoilerAppointmentBooking", path: "/appointments", method: "POST", bodyKey: "input") {\n    startTime\n  }\n}\n    '])));function cs(n){var e=Object.assign({},gd,n);return Cd.a(ds,e)}var ss=Object(Rd.d)(bt||(bt=Object(Sd.a)(['\n    query SurveyAppointmentSlots {\n  surveyAppointmentSlots @rest(type: "AppointmentSlotsResponse", path: "/appointments") {\n    slots @type(name: "AppointmentSlot") {\n      startTime\n    }\n  }\n}\n    '])));function us(n){var e=Object.assign({},gd,n);return fd.a(ss,e)}var Es=Object(Rd.d)(Dt||(Dt=Object(Sd.a)(['\n    query BoilerGetQuote($quoteReference: String!, $quoteRevision: String!, $postcode: String!) {\n  boilerGetQuote(\n    quoteReference: $quoteReference\n    quoteRevision: $quoteRevision\n    postcode: $postcode\n  ) @rest(type: "BoilerGetQuoteResults", path: "/quote?quoteReference={args.quoteReference}&quoteRevision={args.quoteRevision}&postcode={args.postcode}") {\n    requestedQuote {\n      quoteId\n      quoteReference\n      quoteRevision\n      quoteStatus\n      dateOfQuote\n      validUntil\n      totalToPayInclusive\n      totalToPayExcludingTax\n      vat\n      depositAmountForPartialPayment\n      customerDetails {\n        email\n        title\n        firstName\n        lastName\n        mobileNumber\n        address1\n        address2\n        address3\n        city\n        county\n        postcode\n      }\n      products {\n        productId\n        description\n        quantity\n      }\n    }\n    newerQuote {\n      quoteId\n      quoteReference\n      quoteRevision\n      quoteStatus\n      dateOfQuote\n      validUntil\n      totalToPayInclusive\n      totalToPayExcludingTax\n      vat\n      depositAmountForPartialPayment\n      customerDetails {\n        email\n        title\n        firstName\n        lastName\n        mobileNumber\n        address1\n        address2\n        address3\n        city\n        county\n        postcode\n      }\n      products {\n        productId\n        description\n        quantity\n      }\n    }\n  }\n}\n    '])));function ms(n){var e=Object.assign({},gd,n);return fd.a(Es,e)}var ls=Object(Rd.d)(Pt||(Pt=Object(Sd.a)(['\n    mutation BoilerSelectPayment($postSelectPaymentInput: BoilerSelectPaymentInput) {\n  boilerSelectPayment(input: $postSelectPaymentInput) @rest(type: "BoilerSelectPayment", path: "/quote", method: "POST", bodyKey: "input") {\n    postcode\n  }\n}\n    '])));function Ts(n){var e=Object.assign({},gd,n);return Cd.a(ls,e)}var ps=Object(Rd.d)(Mt||(Mt=Object(Sd.a)(['\n    query PostCodeEligibility($postcode: String!) {\n  postCodeEligibility(postcode: $postcode) @rest(type: "PostCodeEligibilityResult", path: "/postcode/eligibility?postcode={args.postcode}") {\n    postcode\n    eligible\n    provider\n  }\n}\n    '])));function Ns(n){var e=Object.assign({},gd,n);return fd.a(ps,e)}Object(Rd.d)(Lt||(Lt=Object(Sd.a)(["\n    query fitMeterReadingStatusPanel($accountNumber: String!) {\n  fitInstallations(accountNumber: $accountNumber) {\n    meters {\n      id\n      readings(first: 1) {\n        edges {\n          node {\n            readAt\n          }\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Ut||(Ut=Object(Sd.a)(["\n    query getFitInstallations($accountNumber: String!) {\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n}\n    "])));Object(Rd.d)(Ft||(Ft=Object(Sd.a)(["\n    mutation fitCreateMeterReadings($fitReadings: FitMeterReadingInput!) {\n  fitCreateMeterReadings(input: $fitReadings) {\n    readingsSubmitted\n  }\n}\n    "])));Object(Rd.d)(vt||(vt=Object(Sd.a)(["\n    query fitInstallations($accountNumber: String!) {\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n    meters {\n      id\n      maxExpectedRead\n      mpan\n      readings(first: 2) {\n        edges {\n          node {\n            isBiennial\n            readAt\n            value\n          }\n        }\n      }\n      serialNumber\n      type\n    }\n  }\n}\n    "])));Object(Rd.d)($t||($t=Object(Sd.a)(["\n    mutation CreateAcquisitionQuoteRequestForProducts($input: CreateAcquisitionQuoteRequestForProductsInput!) {\n  createAcquisitionQuoteRequestForProducts(input: $input) {\n    quoteRequest {\n      electricitySupplyPoints {\n        quotedProducts {\n          annualAmount\n          electricityTariffInformationLabel {\n            ... on ProductTariffInformationLabelStandard {\n              assumedAnnualConsumption\n              estimatedAnnualCost\n              standingCharge\n              unitRate\n            }\n            ... on ProductTariffInformationLabelEco7 {\n              assumedAnnualConsumptionDay\n              assumedAnnualConsumptionNight\n              estimatedAnnualCost\n              standingCharge\n              unitRateDay\n              unitRateNight\n            }\n          }\n          monthlyAmount\n          product {\n            code\n            id\n          }\n        }\n      }\n      gasSupplyPoints {\n        quotedProducts {\n          annualAmount\n          gasTariffInformationLabel {\n            assumedAnnualConsumption\n            estimatedAnnualCost\n            standingCharge\n            unitRate\n          }\n          monthlyAmount\n          product {\n            code\n            id\n          }\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(jt||(jt=Object(Sd.a)(["\n    mutation createCustomerQuote($input: CreateQuoteInput!) {\n  createQuote(input: $input) {\n    errors {\n      errors {\n        ... on SerializerErrorType {\n          code\n          message\n        }\n        ... on SerializerFieldErrorsType {\n          errors {\n            ... on SerializerErrorType {\n              code\n              message\n            }\n            ... on SerializerFieldErrorsType {\n              errors {\n                ... on SerializerErrorType {\n                  code\n                  message\n                }\n              }\n              field\n            }\n          }\n          field\n        }\n      }\n      field\n    }\n    quote {\n      code\n      elecAnnualConsumptionDay\n      elecAnnualConsumptionNight\n      elecAnnualConsumptionStandard\n      elecEstimate\n      gasAnnualConsumption\n      gasEstimate\n      gspGroupId\n      partnerProductId\n      postcode\n      products: quotedProducts {\n        allowedSupplyStartDates\n        annualAmount\n        annualSaving\n        co2SavingInKg\n        description\n        electricityTariffInformationLabel {\n          ... on TariffInformationLabelStandard {\n            additionals\n            assumedAnnualConsumption\n            estimatedAnnualCost\n            exitFees\n            paymentMethod\n            priceGuaranteedUntil\n            standingCharge\n            supplier\n            tariffCode\n            tariffComparisonRate\n            tariffEndsOn\n            tariffName\n            tariffType\n            unitRate\n          }\n          ... on TariffInformationLabelEco7 {\n            additionals\n            assumedAnnualConsumptionDay\n            assumedAnnualConsumptionNight\n            estimatedAnnualCost\n            exitFees\n            paymentMethod\n            priceGuaranteedUntil\n            standingCharge\n            supplier\n            tariffCode\n            tariffComparisonRate\n            tariffEndsOn\n            tariffName\n            tariffType\n            unitRateDay\n            unitRateNight\n          }\n          ... on TariffInformationLabelThreeRate {\n            additionals\n            assumedAnnualConsumptionDay\n            assumedAnnualConsumptionNight\n            assumedAnnualConsumptionOffPeak\n            estimatedAnnualCost\n            exitFees\n            paymentMethod\n            priceGuaranteedUntil\n            standingCharge\n            supplier\n            tariffCode\n            tariffComparisonRate\n            tariffEndsOn\n            tariffName\n            tariffType\n            unitRateDay\n            unitRateNight\n            unitRateOffPeak\n          }\n        }\n        gasTariffInformationLabel {\n          additionals\n          assumedAnnualConsumption\n          estimatedAnnualCost\n          exitFees\n          paymentMethod\n          priceGuaranteedUntil\n          standingCharge\n          supplier\n          tariffCode\n          tariffComparisonRate\n          tariffEndsOn\n          tariffName\n          tariffType\n          unitRate\n        }\n        id\n        isVariable\n        monthlyAmount\n        name\n        product {\n          code\n          isPrepay\n        }\n        treesSaving\n      }\n      termsAndConditions {\n        pdfUrl\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(ht||(ht=Object(Sd.a)(["\n    query EnergyProduct($codeElectricity: String!, $codeGas: String!, $postcode: String!) {\n  energyProductElectricity: energyProduct(code: $codeElectricity) {\n    id\n    fullName\n    displayName\n    description\n    availableFrom\n    availableTo\n    isHidden\n    code\n    direction\n    notes\n    isVariable\n    isGreen\n    isBusiness\n    isChargedHalfHourly\n    isPrepay\n    isDefault\n    isOccupier\n    term\n    tariffs(postcode: $postcode) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          ... on DayNightTariff {\n            id\n            displayName\n            fullName\n            description\n            productCode\n            standingCharge\n            preVatStandingCharge\n            dayRate\n            dayRateEpgApplied\n            nightRate\n            nightRateEpgApplied\n            preVatDayRate\n            preVatNightRate\n            tariffCode\n          }\n        }\n        cursor\n      }\n      totalCount\n      edgeCount\n    }\n    isAvailable\n    isUnavailable\n    isFixed\n    isDomestic\n    includesEpgReduction\n    exitFees\n    exitFeesType\n  }\n  energyProductGas: energyProduct(code: $codeGas) {\n    id\n    fullName\n    displayName\n    description\n    availableFrom\n    availableTo\n    isHidden\n    code\n    direction\n    notes\n    isVariable\n    isGreen\n    isBusiness\n    isChargedHalfHourly\n    isPrepay\n    isDefault\n    isOccupier\n    term\n    tariffs(postcode: $postcode) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          ... on GasTariffType {\n            id\n            displayName\n            fullName\n            description\n            productCode\n            standingCharge\n            preVatStandingCharge\n            unitRate\n            unitRateEpgApplied\n            preVatUnitRate\n            tariffCode\n          }\n        }\n        cursor\n      }\n      totalCount\n      edgeCount\n    }\n    isAvailable\n    isUnavailable\n    isFixed\n    isDomestic\n    includesEpgReduction\n    exitFees\n    exitFeesType\n  }\n}\n    "])));Object(Rd.d)(Gt||(Gt=Object(Sd.a)(["\n    query getEarliestPaymentDate {\n  earliestPossibleDirectDebitPaymentDate {\n    earliestPossibleDirectDebitPaymentDate\n  }\n}\n    "])));Object(Rd.d)(Bt||(Bt=Object(Sd.a)(["\n    mutation CreateOccupyAccount($input: OccupyInput!) {\n  occupy(input: $input) {\n    account {\n      paymentSchedules(first: 1) {\n        edges {\n          node {\n            validFrom\n          }\n        }\n      }\n      ... on AccountType {\n        electricityAgreements {\n          id\n          validFrom\n        }\n        gasAgreements {\n          id\n          validFrom\n        }\n        id\n        users {\n          email\n          fullName\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Ht||(Ht=Object(Sd.a)(["\n    mutation createRequote($input: RequoteInput!) {\n  requote(input: $input) {\n    quote {\n      code\n      gspGroupId\n      meterType\n      partnerProductId\n      postcode\n      elecAnnualConsumptionStandard\n      elecAnnualConsumptionDay\n      elecAnnualConsumptionNight\n      gasAnnualConsumption\n      elecEstimate\n      gasEstimate\n      quotedProducts {\n        ...ChooseQuotedProductFields\n      }\n    }\n  }\n}\n    ",""])),wd);Object(Rd.d)(qt||(qt=Object(Sd.a)(["\n    query getOccupierAccount($postcode: String!, $shortcode: String!) {\n  occupierAccount(postcode: $postcode, shortcode: $shortcode) {\n    account\n    address\n    date\n    occupyToken\n    propertyId\n  }\n}\n    "])));Object(Rd.d)(Vt||(Vt=Object(Sd.a)(["\n    query GetOccupierQuote($code: String, $productId: String) {\n  quote(code: $code) {\n    postcode\n    elecAnnualConsumptionStandard\n    elecAnnualConsumptionDay\n    elecAnnualConsumptionNight\n    elecEstimate\n    gasAnnualConsumption\n    gasEstimate\n    quotedProducts(id: $productId) {\n      allowedSupplyStartDates\n      electricityTariffInformationLabel {\n        __typename\n        ... on TariffInformationLabelStandard {\n          additionals\n          annualStandingCharge\n          assumedAnnualConsumption\n          estimatedAnnualCost\n          exitFees\n          paymentMethod\n          priceGuaranteedUntil\n          standingCharge\n          supplier\n          tariffCode\n          tariffComparisonRate\n          tariffEndsOn\n          tariffName\n          tariffType\n          unitRate\n        }\n        ... on TariffInformationLabelEco7 {\n          additionals\n          assumedAnnualConsumptionDay\n          assumedAnnualConsumptionNight\n          estimatedAnnualCost\n          exitFees\n          paymentMethod\n          priceGuaranteedUntil\n          standingCharge\n          supplier\n          tariffCode\n          tariffComparisonRate\n          tariffEndsOn\n          tariffName\n          tariffType\n          unitRateDay\n          unitRateNight\n        }\n      }\n      gasTariffInformationLabel {\n        additionals\n        annualStandingCharge\n        assumedAnnualConsumption\n        estimatedAnnualCost\n        exitFees\n        paymentMethod\n        priceGuaranteedUntil\n        standingCharge\n        supplier\n        tariffCode\n        tariffComparisonRate\n        tariffEndsOn\n        tariffName\n        tariffType\n        unitRate\n      }\n      id\n      monthlyAmount\n      name\n      product {\n        code\n        isPrepay\n      }\n    }\n    termsAndConditions {\n      html\n      pdfUrl\n    }\n  }\n}\n    "])));Object(Rd.d)(wt||(wt=Object(Sd.a)(["\n    query moveOutStepsProperty($propertyId: ID!) {\n  property(id: $propertyId) {\n    gasMeterPoints {\n      id\n      meters(includeInactive: false) {\n        id\n      }\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(kt||(kt=Object(Sd.a)(["\n    query moveOutJourney($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    balance\n    billingAddress\n    billingAddressLine1\n    billingPostcode\n    directDebitInstructions(first: 1, statuses: [ACTIVE]) {\n      edges {\n        node {\n          id\n          status\n        }\n      }\n    }\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n              standingCharge\n            }\n            ... on StandardTariff {\n              unitRate\n            }\n            ... on DayNightTariff {\n              dayRate\n              nightRate\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n          registers {\n            id\n          }\n        }\n        smartStartDate\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n            standingCharge\n            unitRate\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n          registers {\n            id\n          }\n        }\n        smartStartDate\n      }\n      id\n    }\n  }\n  consumptionEstimates {\n    medium {\n      elecAnnualConsumptionDay\n      elecAnnualConsumptionNight\n      elecAnnualConsumptionStandard\n      gasAnnualConsumption\n    }\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n  viewer {\n    givenName\n    id\n  }\n}\n    "])));Object(Rd.d)(Yt||(Yt=Object(Sd.a)(["\n    mutation electricityReadingsCreateReading($mpan: String!, $readAt: Date!, $readings: [ReadingInputType]!, $serialNumber: String!) {\n  createElectricityMeterReading(\n    mpan: $mpan\n    readAt: $readAt\n    readings: $readings\n    serialNumber: $serialNumber\n  ) {\n    id\n  }\n}\n    "])));Object(Rd.d)(Wt||(Wt=Object(Sd.a)(["\n    query electricityReadingsProperty($propertyId: ID!) {\n  property(id: $propertyId) {\n    electricityMeterPoints {\n      id\n      meters(includeInactive: false) {\n        id\n        readings(first: 1) {\n          edges {\n            node {\n              id\n              readAt\n              registers {\n                identifier\n                value\n              }\n            }\n          }\n        }\n        registers {\n          digits\n          expectedReadingRanges\n          id\n          identifier\n          name\n        }\n        serialNumber\n      }\n      mpan\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(xt||(xt=Object(Sd.a)(["\n    mutation gasReadingsCreateReading($mprn: String!, $readAt: Date!, $reading: Int!, $serialNumber: String!) {\n  createGasMeterReading(\n    mprn: $mprn\n    readAt: $readAt\n    reading: $reading\n    serialNumber: $serialNumber\n  ) {\n    id\n  }\n}\n    "])));Object(Rd.d)(Kt||(Kt=Object(Sd.a)(["\n    query gasReadingsProperty($propertyId: ID!) {\n  property(id: $propertyId) {\n    gasMeterPoints {\n      id\n      meters(includeInactive: false) {\n        id\n        readings(first: 1) {\n          edges {\n            node {\n              id\n              readAt\n              registers {\n                identifier\n                value\n              }\n            }\n          }\n        }\n        registers {\n          digits\n          expectedReadingRanges\n          id\n          identifier\n          name\n        }\n        serialNumber\n      }\n      mprn\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(Qt||(Qt=Object(Sd.a)(["\n    query moveOutDateAccount($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      id\n      postcode\n      splitAddress\n    }\n    bills(first: 1) {\n      totalCount\n      edges {\n        node {\n          billType\n          id\n          issuedDate\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Xt||(Xt=Object(Sd.a)(["\n    query moveOutOnlineErrorPage($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    id\n  }\n}\n    "])));Object(Rd.d)(Jt||(Jt=Object(Sd.a)(["\n    mutation performMoveOut($input: MoveOutInput!) {\n  performMoveOut(input: $input) {\n    account {\n      ... on AccountType {\n        id\n        status\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(zt||(zt=Object(Sd.a)(["\n    query moveOutReview($propertyId: ID!) {\n  property(id: $propertyId) {\n    electricityMeterPoints {\n      agreements(includeInactive: false) {\n        id\n        tariff {\n          __typename\n          ... on TariffType {\n            displayName\n            id\n          }\n        }\n        validFrom\n        validTo\n      }\n      id\n      meters(includeInactive: false) {\n        id\n      }\n    }\n    gasMeterPoints {\n      agreements(includeInactive: false) {\n        id\n        tariff {\n          displayName\n          id\n        }\n        validFrom\n        validTo\n      }\n      id\n      meters(includeInactive: false) {\n        id\n      }\n    }\n    id\n    postcode\n  }\n}\n    "])));Object(Rd.d)(Zt||(Zt=Object(Sd.a)(["\n    query selectPropertyAccountPropertiesMeters($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    id\n    properties {\n      address\n      electricityMeterPoints {\n        __typename\n        agreements {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              displayName\n              fullName\n              id\n              productCode\n            }\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      gasMeterPoints {\n        __typename\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              displayName\n              fullName\n              id\n              productCode\n            }\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      id\n      splitAddress\n    }\n  }\n}\n    "])));Object(Rd.d)(na||(na=Object(Sd.a)(["\n    query strugglingToPayAccountBalance($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    balance\n    id\n  }\n}\n    "])));Object(Rd.d)(ea||(ea=Object(Sd.a)(["\n    query getAccountAgreementsAndProperties($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    electricityAgreements {\n      id\n      meterPoint {\n        gspGroupId\n        id\n        profileClass\n      }\n      tariff {\n        ... on TariffType {\n          displayName\n          id\n          standingCharge\n        }\n        ... on StandardTariff {\n          productCode\n          unitRate\n        }\n        ... on DayNightTariff {\n          dayRate\n          nightRate\n          productCode\n        }\n        ... on ThreeRateTariff {\n          dayRate\n          nightRate\n          offPeakRate\n          productCode\n        }\n        ... on HalfHourlyTariff {\n          productCode\n          unitRates {\n            value\n          }\n        }\n        ... on PrepayTariff {\n          productCode\n          unitRate\n        }\n      }\n      validFrom\n      validTo\n    }\n    gasAgreements {\n      id\n      tariff {\n        displayName\n        id\n        productCode\n        standingCharge\n        unitRate\n      }\n      validFrom\n      validTo\n    }\n    id\n    properties {\n      address\n      id\n      postcode\n      electricityMeterPoints {\n        id\n        agreements {\n          tariff {\n            __typename\n            ... on StandardTariff {\n              id\n              productCode\n            }\n            ... on DayNightTariff {\n              id\n              productCode\n            }\n            ... on ThreeRateTariff {\n              id\n              productCode\n            }\n            ... on HalfHourlyTariff {\n              id\n              productCode\n            }\n            ... on PrepayTariff {\n              id\n              productCode\n            }\n          }\n        }\n      }\n      gasMeterPoints {\n        id\n        agreements {\n          tariff {\n            __typename\n            productCode\n          }\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(ta||(ta=Object(Sd.a)(["\n    query getAddressesGspGroupIdMeterTypeAndProduct($code: String!, $newPostcode: String!) {\n  addressesNewPostcode: addresses(postcode: $newPostcode) {\n    edges {\n      node {\n        addressKey\n        display\n        electricityMeterPoints {\n          profileClass\n        }\n        gasMeterPoints {\n          mprn\n        }\n        gspGroupId\n      }\n    }\n  }\n  energyProduct(code: $code) {\n    code\n    tariffs(postcode: $newPostcode) {\n      edges {\n        node {\n          ... on TariffType {\n            displayName\n            id\n            productCode\n            standingCharge\n          }\n          ... on StandardTariff {\n            displayName\n            id\n            productCode\n            unitRate\n          }\n          ... on DayNightTariff {\n            dayRate\n            displayName\n            id\n            nightRate\n            productCode\n          }\n          ... on GasTariffType {\n            displayName\n            id\n            productCode\n            unitRate\n          }\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(aa||(aa=Object(Sd.a)(["\n    mutation currentHomeConsumption($input: RequoteInput!) {\n  requote(input: $input) {\n    quote {\n      elecAnnualConsumptionDay\n      elecAnnualConsumptionNight\n      elecAnnualConsumptionStandard\n      gasAnnualConsumption\n    }\n  }\n}\n    "])));Object(Rd.d)(ia||(ia=Object(Sd.a)(["\n    query onboardingDataRefreshContactDetailsPage {\n  viewer {\n    id\n    preferredName\n  }\n}\n    "])));Object(Rd.d)(ra||(ra=Object(Sd.a)(["\n    query onboardingDataRefreshSmartAppointmentPage($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      id\n    }\n  }\n  viewer {\n    id\n    preferredName\n  }\n}\n    "])));Object(Rd.d)(oa||(oa=Object(Sd.a)(["\n    query getAccountDetailsSmartHalfHourlyPage($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n        }\n        smartStartDate\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n        }\n        smartStartDate\n      }\n      id\n    }\n  }\n  smartMeterDataPreferences(accountNumber: $accountNumber) {\n    readingFrequency\n    readingsAnalysisConsentProvided\n  }\n}\n    "])));Object(Rd.d)(da||(da=Object(Sd.a)(["\n    mutation updateSmartMeterReadingFrequency($accountNumber: String!, $analysisConsentProvided: Boolean, $readingFrequency: SmartMeterReadingFrequencyChoices!) {\n  updateSmartMeterDataPreferences(\n    input: {accountNumber: $accountNumber, readingFrequency: $readingFrequency, allowReadingsAnalysis: $analysisConsentProvided}\n  ) {\n    smartMeterDataPreferences {\n      readingFrequency\n      readingsAnalysisConsentProvided\n    }\n  }\n}\n    "])));Object(Rd.d)(ca||(ca=Object(Sd.a)(["\n    query onboardingDataRefreshThankYouPage {\n  viewer {\n    id\n    preferredName\n  }\n}\n    "])));Object(Rd.d)(sa||(sa=Object(Sd.a)(["\n    query onboardingDataRefreshVulnerabilityPage($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n        }\n        smartStartDate\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n        }\n        smartStartDate\n      }\n      id\n    }\n  }\n  metadata(identifier: $accountNumber, linkedObjectType: ACCOUNT) {\n    key\n    value\n  }\n  smartMeterDataPreferences(accountNumber: $accountNumber) {\n    readingFrequency\n    readingsAnalysisConsentProvided\n  }\n}\n    "])));Object(Rd.d)(ua||(ua=Object(Sd.a)(["\n    query getUserEmail {\n  viewer {\n    email\n  }\n}\n    "])));Object(Rd.d)(Ea||(Ea=Object(Sd.a)(["\n    mutation updateLastViewedDate($inputMetadata: MetadataInput!) {\n  updateMetadata(input: $inputMetadata) {\n    metadata {\n      key\n      value\n    }\n  }\n}\n    "])));Object(Rd.d)(ma||(ma=Object(Sd.a)(["\n    query onboardingStepsHook($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    id\n  }\n}\n    "])));Object(Rd.d)(la||(la=Object(Sd.a)(["\n    query onboardingSummaryPage {\n  viewer {\n    givenName\n    id\n  }\n}\n    "])));Object(Rd.d)(Ta||(Ta=Object(Sd.a)(["\n    query onboardingGetUserDetails($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    applications(first: 1) {\n      edges {\n        node {\n          migrationSource\n        }\n      }\n    }\n    id\n  }\n  viewer {\n    id\n    preferredName\n  }\n}\n    "])));Object(Rd.d)(pa||(pa=Object(Sd.a)(["\n    mutation updateOnboardingJourneyMetadata($inputMetadata: MetadataInput!) {\n  updateMetadata(input: $inputMetadata) {\n    metadata {\n      key\n      value\n    }\n  }\n}\n    "])));Object(Rd.d)(Na||(Na=Object(Sd.a)(["\n    mutation updateContactDetails($familyName: String, $givenName: String, $landline: String, $mobile: String) {\n  updateUser(\n    input: {givenName: $givenName, familyName: $familyName, mobile: $mobile, landline: $landline}\n  ) {\n    viewer {\n      familyName\n      givenName\n      id\n      landline\n      mobile\n      preferredName\n    }\n  }\n}\n    "])));Object(Rd.d)(_a||(_a=Object(Sd.a)(["\n    query UserContactDetails {\n  viewer {\n    familyName\n    givenName\n    id\n    landline\n    mobile\n  }\n}\n    "])));Object(Rd.d)(Ia||(Ia=Object(Sd.a)(["\n    query onboardingGetMarketingPreferences($email: String!) {\n  metadata(identifier: $email, linkedObjectType: ACCOUNT_USER) {\n    key\n    value\n  }\n  viewer {\n    id\n    preferences {\n      emailFormat\n      fontSizeMultiplier\n      isOptedInMeterReadingConfirmations\n      isOptedInToClientMessages\n      isOptedInToOfferMessages\n      isOptedInToRecommendedMessages\n      isOptedInToSmsMessages\n      isOptedInToThirdPartyMessages\n      isOptedInToUpdateMessages\n      isUsingInvertedEmailColours\n      preferredHoldMusic\n    }\n  }\n}\n    "])));Object(Rd.d)(Oa||(Oa=Object(Sd.a)(["\n    query onboardingGetUser($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    id\n  }\n  viewer {\n    email\n    id\n  }\n}\n    "])));Object(Rd.d)(Sa||(Sa=Object(Sd.a)(["\n    mutation onboardingUpdateMarketingPreferences($inputCommsPreferences: UpdateAccountUserCommsPreferencesMutationInput!, $inputMetadata: MetadataInput!) {\n  updateCommsPreferences(input: $inputCommsPreferences) {\n    commsPreferences {\n      isOptedInToOfferMessages\n      isOptedInToThirdPartyMessages\n    }\n  }\n  updateMetadata(input: $inputMetadata) {\n    metadata {\n      key\n      value\n    }\n  }\n}\n    "])));Object(Rd.d)(Ra||(Ra=Object(Sd.a)(["\n    query oneOffPayment($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    balance\n    billingAddress\n    billingPostcode\n    id\n  }\n  fitInstallations(accountNumber: $accountNumber) {\n    fitId\n  }\n}\n    "])));Object(Rd.d)(Aa||(Aa=Object(Sd.a)(["\n    mutation createRequestRefund($accountNumber: String!, $requestedAmount: Int!) {\n  createRefundRequest(\n    input: {accountNumber: $accountNumber, requestedAmount: $requestedAmount}\n  ) {\n    refundRequest {\n      requestedAmountToReturn\n    }\n  }\n}\n    "])));Object(Rd.d)(fa||(fa=Object(Sd.a)(["\n    query requestRefundPage($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    balance\n    canRequestRefund\n    id\n    maximumRefund {\n      amount\n      recommendedBalance\n    }\n    payments(first: 100) {\n      edges {\n        node {\n          amount\n          id\n          paymentDate\n          status\n          transactionType\n        }\n      }\n    }\n    paymentSchedules(first: 1) {\n      edges {\n        node {\n          id\n          paymentAmount\n        }\n      }\n    }\n  }\n  livePaymentAdequacy(accountNumber: $accountNumber) {\n    recommendedPayment {\n      total\n    }\n  }\n  defaultPaymentInstruction(\n    accountNumber: $accountNumber\n    instructionType: DIRECT_DEBIT\n  ) {\n    id\n    validFrom\n  }\n}\n    "])));Object(Rd.d)(Ca||(Ca=Object(Sd.a)(["\n    mutation updatedRefundPaymentSchedule($accountNumber: String!, $amount: Int!) {\n  updatePaymentSchedulePaymentAmount(\n    input: {accountNumber: $accountNumber, amount: $amount}\n  ) {\n    paymentSchedule {\n      id\n      paymentAmount\n    }\n  }\n}\n    "])));Object(Rd.d)(ga||(ga=Object(Sd.a)(["\n    query renewTariffCallUsPage($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    canRenewTariff\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              __typename\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          meterType\n          registers {\n            __typename\n            id\n          }\n        }\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          mechanism\n          registers {\n            __typename\n            id\n          }\n        }\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(ya||(ya=Object(Sd.a)(["\n    query campaignQuoteRequestHookAccount($accountNumber: String!) {\n  activeCampaignOffers(accountNumber: $accountNumber) {\n    expiryDate\n    name\n    slug\n  }\n}\n    "])));Object(Rd.d)(ba||(ba=Object(Sd.a)(["\n    query existingTariff($code: String!) {\n  energyProduct(code: $code) {\n    id\n    ...ProductHasChangeFee\n  }\n}\n    ",""])),ac);Object(Rd.d)(Da||(Da=Object(Sd.a)(["\n    mutation campaignQuoteRequestHookQuoteCampaignOffer($input: QuoteCampaignOfferInput!) {\n  quoteCampaignOffer(input: $input) {\n    quoteCode\n  }\n}\n    "])));Object(Rd.d)(Pa||(Pa=Object(Sd.a)(["\n    query campaignQuoteRequestHookQuoteRequest($quoteCode: String!) {\n  quoteRequest(quoteCode: $quoteCode) {\n    electricitySupplyPoints {\n      agreement {\n        id\n      }\n      quotedProducts {\n        annualAmount\n        electricityTariffInformationLabel {\n          ... on ProductTariffInformationLabelStandard {\n            additionals\n            assumedAnnualConsumption\n            estimatedAnnualCost\n            exitFees\n            paymentMethod\n            priceGuaranteedUntil\n            standingCharge\n            supplier\n            tariffComparisonRate\n            tariffEndsOn\n            tariffFullName\n            tariffType\n            unitRate\n          }\n          ... on ProductTariffInformationLabelEco7 {\n            additionals\n            assumedAnnualConsumptionDay\n            assumedAnnualConsumptionNight\n            estimatedAnnualCost\n            exitFees\n            paymentMethod\n            priceGuaranteedUntil\n            standingCharge\n            supplier\n            tariffComparisonRate\n            tariffEndsOn\n            tariffFullName\n            tariffType\n            unitRateDay\n            unitRateNight\n          }\n        }\n        label\n        monthlyAmount\n        product {\n          code\n          description\n          fullName\n          id\n          isPrepay\n        }\n      }\n    }\n    gasSupplyPoints {\n      agreement {\n        id\n      }\n      quotedProducts {\n        annualAmount\n        gasTariffInformationLabel {\n          additionals\n          assumedAnnualConsumption\n          estimatedAnnualCost\n          exitFees\n          paymentMethod\n          priceGuaranteedUntil\n          standingCharge\n          supplier\n          tariffComparisonRate\n          tariffEndsOn\n          tariffFullName\n          tariffType\n          unitRate\n        }\n        label\n        monthlyAmount\n        product {\n          code\n          description\n          fullName\n          id\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Ma||(Ma=Object(Sd.a)(["\n    query renewTariffChooseTariffPage($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    canRenewTariff\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              __typename\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          meterType\n          registers {\n            __typename\n            id\n          }\n        }\n        mpan\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          __typename\n          id\n          mechanism\n          registers {\n            __typename\n            id\n          }\n        }\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(La||(La=Object(Sd.a)(["\n    mutation CreateQuoteRequestForProducts($input: CreateQuoteRequestForProductsInput!) {\n  createQuoteRequestForProducts(input: $input) {\n    quoteRequest {\n      electricitySupplyPoints {\n        quotedProducts {\n          annualAmount\n          electricityTariffInformationLabel {\n            ... on ProductTariffInformationLabelStandard {\n              assumedAnnualConsumption\n              estimatedAnnualCost\n              standingCharge\n              unitRate\n            }\n            ... on ProductTariffInformationLabelEco7 {\n              assumedAnnualConsumptionDay\n              assumedAnnualConsumptionNight\n              estimatedAnnualCost\n              standingCharge\n              unitRateDay\n              unitRateNight\n            }\n          }\n          monthlyAmount\n          product {\n            code\n            id\n          }\n        }\n      }\n      gasSupplyPoints {\n        quotedProducts {\n          annualAmount\n          gasTariffInformationLabel {\n            assumedAnnualConsumption\n            estimatedAnnualCost\n            standingCharge\n            unitRate\n          }\n          monthlyAmount\n          product {\n            code\n            id\n          }\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Ua||(Ua=Object(Sd.a)(["\n    mutation chooseTariffRequote($input: RequoteInput!) {\n  requote(input: $input) {\n    quote {\n      address {\n        addressLine1\n      }\n      code\n      elecAnnualConsumptionDay\n      elecAnnualConsumptionNight\n      elecAnnualConsumptionStandard\n      elecEstimate\n      gasAnnualConsumption\n      gasEstimate\n      gspGroupId\n      meterType\n      partnerProductId\n      postcode\n      quotedProducts {\n        annualAmount\n        co2SavingInKg\n        description\n        electricityTariffInformationLabel {\n          ... on TariffInformationLabelStandard {\n            additionals\n            assumedAnnualConsumption\n            estimatedAnnualCost\n            exitFees\n            paymentMethod\n            priceGuaranteedUntil\n            standingCharge\n            supplier\n            tariffComparisonRate\n            tariffEndsOn\n            tariffName\n            tariffType\n            unitRate\n          }\n          ... on TariffInformationLabelEco7 {\n            additionals\n            assumedAnnualConsumptionDay\n            assumedAnnualConsumptionNight\n            estimatedAnnualCost\n            exitFees\n            paymentMethod\n            priceGuaranteedUntil\n            standingCharge\n            supplier\n            tariffComparisonRate\n            tariffEndsOn\n            tariffName\n            tariffType\n            unitRateDay\n            unitRateNight\n          }\n          ... on TariffInformationLabelThreeRate {\n            additionals\n            assumedAnnualConsumptionDay\n            assumedAnnualConsumptionNight\n            assumedAnnualConsumptionOffPeak\n            estimatedAnnualCost\n            exitFees\n            paymentMethod\n            priceGuaranteedUntil\n            standingCharge\n            supplier\n            tariffComparisonRate\n            tariffEndsOn\n            tariffName\n            tariffType\n            unitRateDay\n            unitRateNight\n            unitRateOffPeak\n          }\n        }\n        gasTariffInformationLabel {\n          additionals\n          assumedAnnualConsumption\n          estimatedAnnualCost\n          exitFees\n          paymentMethod\n          priceGuaranteedUntil\n          standingCharge\n          supplier\n          tariffComparisonRate\n          tariffEndsOn\n          tariffName\n          tariffType\n          unitRate\n        }\n        id\n        includesCarbonOffsetting\n        isVariable\n        monthlyAmount\n        name\n        product {\n          code\n          isPrepay\n        }\n        treesSaving\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Fa||(Fa=Object(Sd.a)(["\n    mutation ConfirmTariffAddCampaignToAccount($accountNumber: String!, $campaignSlug: String!) {\n  addCampaignToAccount(\n    input: {accountNumber: $accountNumber, campaign: $campaignSlug}\n  ) {\n    campaignAdded\n  }\n}\n    "])));Object(Rd.d)(va||(va=Object(Sd.a)(["\n    query confirmTariffPage($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    paymentSchedules(first: 5) {\n      edges {\n        node {\n          id\n          paymentAdequacyAdjustment\n          paymentAdequacyAdjustmentExpiryDate\n          paymentAmount\n          reason\n          validFrom\n          validTo\n        }\n      }\n    }\n    properties {\n      address\n      electricityMeterPoints {\n        __typename\n        agreements(includeInactive: true) {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              displayName\n              fullName\n              id\n            }\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      gasMeterPoints {\n        agreements(includeInactive: true) {\n          id\n          tariff {\n            displayName\n            fullName\n            id\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      id\n    }\n  }\n  smartMeterDataPreferences(accountNumber: $accountNumber) {\n    readingFrequency\n    readingsAnalysisConsentProvided\n  }\n}\n    "])));Object(Rd.d)($a||($a=Object(Sd.a)(["\n    mutation ConfirmTariffRenewAgreement($input: RenewAgreementsInput!) {\n  renewAgreements(input: $input) {\n    account {\n      ... on AccountType {\n        id\n        paymentSchedules(first: 3) {\n          edges {\n            node {\n              id\n              paymentAdequacyAdjustment\n              paymentAdequacyAdjustmentExpiryDate\n              paymentAmount\n              totalDebtAmount\n              validFrom\n              validTo\n            }\n          }\n        }\n        properties {\n          address\n          electricityMeterPoints {\n            __typename\n            agreements(includeInactive: true) {\n              id\n              tariff {\n                __typename\n                ... on TariffType {\n                  displayName\n                  fullName\n                  id\n                }\n              }\n              validFrom\n              validTo\n            }\n            id\n          }\n          gasMeterPoints {\n            agreements(includeInactive: true) {\n              id\n              tariff {\n                displayName\n                fullName\n                id\n              }\n              validFrom\n              validTo\n            }\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(ja||(ja=Object(Sd.a)(["\n    mutation ConfirmTariffRenewAgreementsForAccount($input: RenewAgreementsForAccountInput!) {\n  renewAgreementsForAccount(input: $input) {\n    account {\n      ... on AccountType {\n        id\n        paymentSchedules(first: 3) {\n          edges {\n            node {\n              id\n              paymentAdequacyAdjustment\n              paymentAdequacyAdjustmentExpiryDate\n              paymentAmount\n              totalDebtAmount\n              validFrom\n              validTo\n            }\n          }\n        }\n        properties {\n          address\n          electricityMeterPoints {\n            __typename\n            agreements(includeInactive: true) {\n              id\n              tariff {\n                __typename\n                ... on TariffType {\n                  displayName\n                  fullName\n                  id\n                }\n              }\n              validFrom\n              validTo\n            }\n            id\n          }\n          gasMeterPoints {\n            agreements(includeInactive: true) {\n              id\n              tariff {\n                displayName\n                fullName\n                id\n              }\n              validFrom\n              validTo\n            }\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(ha||(ha=Object(Sd.a)(["\n    mutation ConfirmTariffUpdateSmartMeterPreferences($accountNumber: String!, $readingFrequency: SmartMeterReadingFrequencyChoices!, $allowReadingsAnalysis: Boolean) {\n  updateSmartMeterDataPreferences(\n    input: {accountNumber: $accountNumber, readingFrequency: $readingFrequency, allowReadingsAnalysis: $allowReadingsAnalysis}\n  ) {\n    preferencesUpdated\n  }\n}\n    "])));Object(Rd.d)(Ga||(Ga=Object(Sd.a)(["\n    query renewTariffNextDrivePage($propertyId: ID!) {\n  property(id: $propertyId) {\n    address\n    postcode\n    electricityMeterPoints {\n      agreements {\n        id\n        tariff {\n          ... on TariffType {\n            displayName\n            id\n            standingCharge\n          }\n          ... on StandardTariff {\n            unitRate\n          }\n          ... on DayNightTariff {\n            dayRate\n            nightRate\n          }\n        }\n        validFrom\n        validTo\n      }\n    }\n    gasMeterPoints {\n      agreements {\n        id\n        tariff {\n          displayName\n          id\n          standingCharge\n          unitRate\n        }\n        validFrom\n        validTo\n      }\n    }\n    id\n  }\n}\n    "])));Object(Rd.d)(Ba||(Ba=Object(Sd.a)(["\n    query evSuccessPage {\n  viewer {\n    id\n    preferredName\n  }\n}\n    "])));Object(Rd.d)(Ha||(Ha=Object(Sd.a)(["\n    mutation createPaymentSchedule($input: PaymentScheduleInput!) {\n  createPaymentSchedule(input: $input) {\n    paymentSchedule {\n      id\n      paymentAmount\n      paymentDay\n    }\n  }\n}\n    "])));Object(Rd.d)(qa||(qa=Object(Sd.a)(["\n    query getPaymentSchedules($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    paymentSchedules(active: true, first: 3) {\n      edges {\n        node {\n          id\n          isVariablePaymentAmount\n        }\n      }\n    }\n  }\n}\n    "])));Object(Rd.d)(Va||(Va=Object(Sd.a)(["\n    mutation updatePaymentSchedulePaymentAmount($input: UpdatePaymentSchedulePaymentAmountInput!) {\n  updatePaymentSchedulePaymentAmount(input: $input) {\n    paymentSchedule {\n      id\n      paymentAmount\n    }\n  }\n}\n    "])));Object(Rd.d)(wa||(wa=Object(Sd.a)(["\n    mutation updatePaymentSchedulePaymentDay($input: UpdatePaymentSchedulePaymentDayInput!) {\n  updatePaymentSchedulePaymentDay(input: $input) {\n    paymentSchedule {\n      id\n      paymentDay\n    }\n  }\n}\n    "])));Object(Rd.d)(ka||(ka=Object(Sd.a)(["\n    query setupDirectDebitContactDetails {\n  viewer {\n    familyName\n    givenName\n    id\n  }\n}\n    "])));Object(Rd.d)(Ya||(Ya=Object(Sd.a)(["\n    mutation setupDirectDebitUpdateContactDetails($familyName: String!, $givenName: String!) {\n  updateUser(input: {givenName: $givenName, familyName: $familyName}) {\n    viewer {\n      familyName\n      givenName\n      id\n      preferredName\n    }\n  }\n}\n    "])));Object(Rd.d)(Wa||(Wa=Object(Sd.a)(["\n    query paymentInformationPage($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    paymentSchedules(first: 5) {\n      edges {\n        node {\n          id\n          paymentAmount\n          reason\n          validFrom\n          validTo\n        }\n      }\n    }\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              id\n              standingCharge\n            }\n            ... on StandardTariff {\n              id\n              unitRate\n            }\n            ... on PrepayTariff {\n              id\n              unitRate\n            }\n            ... on DayNightTariff {\n              dayRate\n              id\n              nightRate\n            }\n            ... on HalfHourlyTariff {\n              id\n              unitRates {\n                value\n              }\n            }\n            ... on ThreeRateTariff {\n              dayRate\n              id\n              nightRate\n              offPeakRate\n            }\n          }\n          validFrom\n          validTo\n        }\n        id\n        meters {\n          id\n          registers {\n            __typename\n            id\n          }\n        }\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            __typename\n            id\n            standingCharge\n            unitRate\n          }\n          validFrom\n          validTo\n        }\n        id\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(xa||(xa=Object(Sd.a)(["\n    query appointmentsGetSlots($propertyId: ID!) {\n  siteworksAppointmentSlots(propertyId: $propertyId) {\n    slots {\n      appointmentDate\n      endTime\n      startTime\n    }\n  }\n}\n    "])));Object(Rd.d)(Ka||(Ka=Object(Sd.a)(["\n    query ConfirmDetails($accountNumber: String!) {\n  siteworksBookingAccountSearchByNumber(accountNumber: $accountNumber) {\n    users {\n      familyName\n      id\n      landline\n      mobile\n      preferredName\n    }\n  }\n}\n    "])));Object(Rd.d)(Qa||(Qa=Object(Sd.a)(["\n    mutation updateUserMobile($mobile: String) {\n  updateUser(input: {mobile: $mobile}) {\n    viewer {\n      mobile\n    }\n  }\n}\n    "])));Object(Rd.d)(Xa||(Xa=Object(Sd.a)(["\n    query smartBookingInstallationDetails($accountNumber: String!) {\n  siteworksBookingAccountSearchByNumber(accountNumber: $accountNumber) {\n    properties {\n      electricityMeterPoints {\n        id\n        meters(includeInactive: false) {\n          id\n        }\n      }\n      gasMeterPoints {\n        id\n        meters(includeInactive: false) {\n          id\n        }\n      }\n      id\n      postcode\n      splitAddress\n    }\n  }\n}\n    "])));Object(Rd.d)(Ja||(Ja=Object(Sd.a)(["\n    mutation smartBookingBookAppointment($input: ConfirmSiteworksAppointmentSlotInput!) {\n  confirmSiteworksAppointmentSlot(input: $input) {\n    siteworksAppointment {\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(za||(za=Object(Sd.a)(["\n    query smartBookingReview($accountNumber: String!) {\n  siteworksBookingAccountSearchByNumber(accountNumber: $accountNumber) {\n    accountType\n    users {\n      email\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(Za||(Za=Object(Sd.a)(['\n    mutation smartBookingUpdateMetadata($accountNumber: String!) {\n  updateMetadata(\n    input: {identifier: $accountNumber, linkedObjectType: ACCOUNT, key: "smart_eligibility", value: "{\\"Smart Eligibility\\": \\"No\\", \\"Smart Eligibility Reason(s)\\": [\\"Customer has a metering appointment booked\\"]}"}\n  ) {\n    metadata {\n      key\n    }\n  }\n}\n    '],['\n    mutation smartBookingUpdateMetadata($accountNumber: String!) {\n  updateMetadata(\n    input: {identifier: $accountNumber, linkedObjectType: ACCOUNT, key: "smart_eligibility", value: "{\\\\"Smart Eligibility\\\\": \\\\"No\\\\", \\\\"Smart Eligibility Reason(s)\\\\": [\\\\"Customer has a metering appointment booked\\\\"]}"}\n  ) {\n    metadata {\n      key\n    }\n  }\n}\n    '])));Object(Rd.d)(ni||(ni=Object(Sd.a)(["\n    query smartBookingSuccess($propertyId: ID!) {\n  property(id: $propertyId) {\n    address\n    id\n  }\n}\n    "])));Object(Rd.d)(ei||(ei=Object(Sd.a)(["\n    query getSmartBookingSlots($propertyId: ID!) {\n  siteworksAppointmentSlots(propertyId: $propertyId) {\n    slots {\n      appointmentDate\n      endTime\n      startTime\n    }\n  }\n}\n    "])));Object(Rd.d)(ti||(ti=Object(Sd.a)(["\n    mutation smartMeterBookingBookAppointment($input: ConfirmSiteworksAppointmentSlotInput!) {\n  confirmSiteworksAppointmentSlot(input: $input) {\n    siteworksAppointment {\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(ai||(ai=Object(Sd.a)(["\n    mutation smartMeterBookingUpdateLandline($landline: String) {\n  updateUser(input: {landline: $landline}) {\n    viewer {\n      landline\n    }\n  }\n}\n    "])));Object(Rd.d)(ii||(ii=Object(Sd.a)(['\n    mutation smartMeterBookingUpdateMetadata($accountNumber: String!) {\n  updateMetadata(\n    input: {identifier: $accountNumber, linkedObjectType: ACCOUNT, key: "smart_eligibility", value: "{\\"Smart Eligibility\\": \\"No\\", \\"Smart Eligibility Reason(s)\\": [\\"Customer has a metering appointment booked\\"]}"}\n  ) {\n    metadata {\n      key\n    }\n  }\n}\n    '],['\n    mutation smartMeterBookingUpdateMetadata($accountNumber: String!) {\n  updateMetadata(\n    input: {identifier: $accountNumber, linkedObjectType: ACCOUNT, key: "smart_eligibility", value: "{\\\\"Smart Eligibility\\\\": \\\\"No\\\\", \\\\"Smart Eligibility Reason(s)\\\\": [\\\\"Customer has a metering appointment booked\\\\"]}"}\n  ) {\n    metadata {\n      key\n    }\n  }\n}\n    '])));Object(Rd.d)(ri||(ri=Object(Sd.a)(["\n    mutation smartMeterBookingUpdateMobile($mobile: String) {\n  updateUser(input: {mobile: $mobile}) {\n    viewer {\n      mobile\n    }\n  }\n}\n    "])));Object(Rd.d)(oi||(oi=Object(Sd.a)(["\n    query smartMeterBookingAppointment($accountNumber: String!) {\n  siteworksBookingAccountSearchByNumber(accountNumber: $accountNumber) {\n    properties {\n      electricityMeterPoints {\n        id\n        meters(includeInactive: false) {\n          id\n        }\n      }\n      gasMeterPoints {\n        id\n        meters(includeInactive: false) {\n          id\n        }\n      }\n      id\n      postcode\n      splitAddress\n    }\n    users {\n      familyName\n      id\n      landline\n      mobile\n      preferredName\n    }\n  }\n}\n    "])));var _s=Object(Rd.d)(di||(di=Object(Sd.a)(["\n    mutation smartInterestRegisterInterest($accountNumber: String!) {\n  smets2Interest(\n    input: {accountNumber: $accountNumber, smets2Interest: INTERESTED}\n  ) {\n    interestUpdated\n  }\n}\n    "])));function Is(n){var e=Object.assign({},gd,n);return Cd.a(_s,e)}Object(Rd.d)(ci||(ci=Object(Sd.a)(["\n    mutation AddCreditToSmartMeter($input: SmartPrepayMeterAmountInput!) {\n  addCreditToSmartMeter(input: $input) {\n    amount\n  }\n}\n    "])));Object(Rd.d)(si||(si=Object(Sd.a)(["\n    mutation CreatePaymentIntent($input: CreatePaymentIntentInput!) {\n  createPaymentIntent(input: $input) {\n    paymentIntent {\n      id\n      reference\n    }\n  }\n}\n    "])));Object(Rd.d)(ui||(ui=Object(Sd.a)(["\n    query getTargetSsd($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    id\n    number\n    properties {\n      electricityMeterPoints {\n        __typename\n        id\n        targetSsd\n      }\n      gasMeterPoints {\n        __typename\n        id\n        targetSsd\n      }\n      id\n      isChangeOfTenancyOngoing\n    }\n  }\n}\n    "])));Object(Rd.d)(Ei||(Ei=Object(Sd.a)(["\n    query smartPaygTopUpPageAccount($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    accountType\n    billingAddress\n    billingPostcode\n    id\n    number\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterPoint {\n            id\n            mpan\n          }\n          meterType\n          serialNumber\n          smartDevices {\n            deviceId\n          }\n        }\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n          meterPoint {\n            id\n            mprn\n          }\n          serialNumber\n          smartDevices {\n            deviceId\n          }\n        }\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(mi||(mi=Object(Sd.a)(["\n    query smartPaygTopUpPageElectricityPrepayLedgers($accountNumber: String!, $elecSerialNumber: String!, $mpan: String!) {\n  electricityPrepayLedgers(\n    accountNumber: $accountNumber\n    mpan: $mpan\n    serialNumber: $elecSerialNumber\n  ) {\n    creditLedger {\n      currentBalance\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(li||(li=Object(Sd.a)(["\n    query smartPaygTopUpPageGasPrepayLedgers($accountNumber: String!, $gasSerialNumber: String!, $mprn: String!) {\n  gasPrepayLedgers(\n    accountNumber: $accountNumber\n    mprn: $mprn\n    serialNumber: $gasSerialNumber\n  ) {\n    creditLedger {\n      currentBalance\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(Ti||(Ti=Object(Sd.a)(['\n    query SmeRenewalsFetchQuotes($accountNumber: String!, $mpxn: String!) {\n  smeRenewalsFetchQuotes(accountNumber: $accountNumber, mpxn: $mpxn) @rest(type: "SmeRenewalsFetchQuotes", path: "/quotes/?account_number={args.accountNumber}&mpxn={args.mpxn}") {\n    quotes @type(name: "SmeRenewalsQuote") {\n      id\n      createdAt\n      accountNumber\n      updatedAt\n      mpxn\n      energyType\n      contractStartDate\n      contractLengthYears\n      tariffCode\n      meterType\n      paymentMethod\n      consumption\n      validFrom\n      validTo\n      standingCharge\n      unitRateGas\n      unitRateStandard\n      unitRateDay\n      unitRateNight\n      unitRateOffPeak\n      annualCost\n      quoteGroupId\n      status\n      agent\n      tariffType\n      livePricingId\n      consumptionSplitDay\n      consumptionSplitNight\n      consumptionSplitStandard\n      consumptionSplitOffPeak\n      krakenReason\n      pricePoint\n      paymentFrequency\n      tariffName\n      oneDay\n    }\n  }\n}\n    '])));Object(Rd.d)(pi||(pi=Object(Sd.a)(['\n    query SmeRenewalsMeterPoints($accountNumber: String!) {\n  smeRenewalsMeterPoints(accountNumber: $accountNumber) @rest(type: "SmeRenewalsAccount", path: "/meter-points/?account_number={args.accountNumber}") {\n    accountNumber\n    properties @type(name: "SmeRenewalsProperty") {\n      propertyId\n      address\n      meterPoints @type(name: "SmeRenewalsMeterPoint") {\n        mpxn\n        fuel\n        tariffName\n        expirationDate\n        eligible\n      }\n    }\n  }\n}\n    '])));Object(Rd.d)(Ni||(Ni=Object(Sd.a)(['\n    mutation SmeRenewalsPostQuotes($postQuotesInput: SmeRenewalsPostQuotesInput) {\n  smeRenewalsPostQuotes(input: $postQuotesInput) @rest(type: "SmeRenewalsPostQuotes", path: "/quotes", method: "POST", bodyKey: "input") {\n    statusCode\n  }\n}\n    '])));Object(Rd.d)(_i||(_i=Object(Sd.a)(["\n    query smeRenewTariffCurrentAgreements($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            __typename\n            ... on TariffType {\n              displayName\n              id\n              standingCharge\n              preVatStandingCharge\n            }\n            ... on StandardTariff {\n              unitRate\n              preVatUnitRate\n            }\n            ... on DayNightTariff {\n              dayRate\n              nightRate\n              preVatDayRate\n              preVatNightRate\n            }\n            ... on ThreeRateTariff {\n              dayRate\n              nightRate\n              offPeakRate\n              preVatDayRate\n              preVatNightRate\n              preVatOffPeakRate\n            }\n          }\n          validFrom\n          validTo\n        }\n        mpan\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            __typename\n            displayName\n            id\n            standingCharge\n            unitRate\n            preVatStandingCharge\n            preVatUnitRate\n          }\n          validFrom\n          validTo\n        }\n        mprn\n      }\n      id\n    }\n  }\n}\n    "])));Object(Rd.d)(Ii||(Ii=Object(Sd.a)(["\n    mutation SmartMeterInterestSolutionsPage($accountNumber: String!) {\n  smets2Interest(\n    input: {accountNumber: $accountNumber, smets2Interest: INTERESTED}\n  ) {\n    interestUpdated\n  }\n}\n    "])));Object(Rd.d)(Oi||(Oi=Object(Sd.a)(["\n    query SolutionFinderSolutionsPage($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    properties {\n      electricityMeterPoints {\n        agreements {\n          id\n          tariff {\n            ... on TariffType {\n              id\n              productCode\n            }\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          meterType\n        }\n        smartStartDate\n      }\n      gasMeterPoints {\n        agreements {\n          id\n          tariff {\n            id\n            productCode\n          }\n        }\n        id\n        meters(includeInactive: false) {\n          id\n          mechanism\n        }\n        smartStartDate\n      }\n      id\n    }\n  }\n  metadata(identifier: $accountNumber, linkedObjectType: ACCOUNT) {\n    key\n    value\n  }\n}\n    "])));Object(Rd.d)(Si||(Si=Object(Sd.a)(["\n    query createGraphQlMocksTest($accountNumber: String!) {\n  account(accountNumber: $accountNumber) {\n    id\n    number\n    status\n  }\n}\n    "])))}}]);
//# sourceMappingURL=9c3c9b07-5038ea21e9f8b6cd2fef.js.map